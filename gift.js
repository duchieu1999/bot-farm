const cron = require('node-cron');

// Danh s√°ch c√°c c√¢u ch√†o bu·ªïi s√°ng ng·∫´u nhi√™n
const morningGreetings = [
  "Ch√†o bu·ªïi s√°ng! Ai mu·ªën nh·∫≠n qu√†?",
  "Bu·ªïi s√°ng t·ªët l√†nh! Ai s·∫Ω l√† ng∆∞·ªùi may m·∫Øn h√¥m nay?",
  "Ch√∫c bu·ªïi s√°ng vui v·∫ª! Ai mu·ªën th·ª≠ v·∫≠n may?",
  "S√°ng nay th·∫≠t tuy·ªát! Ai mu·ªën nh·∫≠n qu√†?",
  "Ch√∫c m·ªçi ng∆∞·ªùi m·ªôt bu·ªïi s√°ng t∆∞∆°i s√°ng! Ai s·∫Ω nh·∫≠n qu√† h√¥m nay?",
];

// ƒê·∫∑t l·∫°i tr·∫°ng th√°i h√†ng ng√†y
function resetDailyGiftStatus(DailyGiftStatus) {
  cron.schedule(
    '49 0 * * *',
    async () => {
      await DailyGiftStatus.updateMany(
        {}, 
        { $set: { dailyGiftClaims: [], giftWonToday: false } }
      );
    },
    {
      timezone: 'Asia/Ho_Chi_Minh',
    }
  );
}

// G·ª≠i tin nh·∫Øn ch√†o bu·ªïi s√°ng
function sendMorningMessage(bot) {
  const chatId = -1002128289933; // ID nh√≥m c·∫ßn g·ª≠i tin nh·∫Øn

  cron.schedule(
    '50 0 * * *',
    () => {
      const inlineKeyboard = {
        inline_keyboard: [
          [
            {
              text: 'Nh·∫≠n l·ªôc may m·∫Øn h√¥m nay',
              callback_data: 'lucky_gift',
            },
          ],
        ],
      };

      const morningGreeting = morningGreetings[
        Math.floor(Math.random() * morningGreetings.length)
      ];

      bot.sendMessage(chatId, morningGreeting, {
        reply_markup: inlineKeyboard,
      });
    },
    {
      timezone: 'Asia/Ho_Chi_Minh',
    }
  );
}

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠n ph·∫ßn qu√†
async function handleGiftClaim(bot, callbackQuery, BangCong2, DailyGiftStatus) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const fullName = `${callbackQuery.from.first_name} ${callbackQuery.from.last_name || ''}`;

  const today = new Date().toLocaleDateString();

  // Truy xu·∫•t tr·∫°ng th√°i t·ª´ MongoDB
  let dailyStatus = await DailyGiftStatus.findOne({ date: today });

  if (!dailyStatus) {
    dailyStatus = await DailyGiftStatus.create({
      date: today,
      dailyGiftClaims: [],
      giftWonToday: false,
    });
  }

  if (dailyStatus.dailyGiftClaims.includes(userId)) {
    bot.answerCallbackQuery(callbackQuery.id, {
      text: "B·∫°n ƒë√£ th·ª≠ nh·∫≠n l·ªôc h√¥m nay r·ªìi!",
      show_alert: true,
    });
    return;
  }

  if (dailyStatus.giftWonToday) {
    bot.answerCallbackQuery(callbackQuery.id, {
      text: "ƒê√£ c√≥ ng∆∞·ªùi nh·∫≠n ƒë∆∞·ª£c l·ªôc h√¥m nay r·ªìi, h√£y th·ª≠ v·∫≠n may v√†o ng√†y mai.",
      show_alert: true,
    });
    return;
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong b·ªô nh·ªõ v√† MongoDB
  dailyStatus.dailyGiftClaims.push(userId);

  const isWinner = Math.random() < 0.20;

  if (isWinner) {
    dailyStatus.giftWonToday = true;

    // T·∫°o s·ªë ng·∫´u nhi√™n t·ª´ 400 ƒë·∫øn 1000
const randomAmount = 400 + Math.random() * (1000 - 400);

// L√†m tr√≤n ƒë·∫øn h√†ng ch·ª•c
const prize = Math.round(randomAmount / 10) * 10;


    bot.answerCallbackQuery(callbackQuery.id, {
      text: `Ch√∫c m·ª´ng! B·∫°n ƒë√£ tr√∫ng l·ªôc ${prize}vnƒë üéâ`,
      show_alert: true,
    });

    await BangCong2.create({
      userId,
      groupId: chatId,
      date: today,
      ten: fullName,
      giftWon: true,
      prizeAmount: prize,
    });

    await dailyStatus.save(); // L∆∞u tr·∫°ng th√°i c·∫≠p nh·∫≠t

    bot.sendMessage(chatId, `Ch√∫c m·ª´ng ${fullName} ƒë√£ nh·∫≠n ƒë∆∞·ª£c l·ªôc may m·∫Øn h√¥m nay v·ªõi ${prize}vnƒë!`);
  } else {
    bot.answerCallbackQuery(callbackQuery.id, {
      text: "R·∫•t ti·∫øc! B·∫°n kh√¥ng tr√∫ng l·ªôc h√¥m nay, h√£y th·ª≠ l·∫°i v√†o ng√†y mai.",
      show_alert: true,
    });
  }

  await dailyStatus.save(); // ƒê·∫£m b·∫£o tr·∫°ng th√°i ƒë∆∞·ª£c l∆∞u
}

module.exports = {
  resetDailyGiftStatus,
  sendMorningMessage,
  handleGiftClaim,
};
