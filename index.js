const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const axios = require('axios');
const express = require('express');
const bodyParser = require('body-parser');
const moment = require('moment');
const request = require('request');
const cron = require('node-cron'); // Th∆∞ vi·ªán ƒë·ªÉ thi·∫øt l·∫≠p cron jobs
const keep_alive = require('./keep_alive.js');
const { resetDailyGiftStatus, sendMorningMessage, handleGiftClaim } = require('./gift');
const { setupNewsSchedule, sendLatestNews } = require('./news.js');
const { handleMessage, resetKeywords } = require('./warningMember');

// K·∫øt n·ªëi t·ªõi MongoDB
mongoose.connect(
  'mongodb+srv://duchieufaryoung0:80E9gUahdOXmGKuy@cluster0.6nlv1cv.mongodb.net/telegram_bot_db?retryWrites=true&w=majority',
  { useNewUrlParser: true, useUnifiedTopology: true }
);
const db = mongoose.connection;

// ƒê·ªãnh nghƒ©a schema cho b·∫£ng c√¥ng
const BangCongSchema = new mongoose.Schema({
  userId: Number,
  groupId: Number,
  date: Date,
  ten: String,
  quay: Number,
  keo: Number,
  tinh_tien: Number,
  giftWon: { type: Boolean, default: false },
  prizeAmount: { type: Number, default: 0 },
  nhan_anh_bill: { type: Number, default: 0 } // Ensure default is 0
});

 // Define the schema and model for Trasua
const trasuaSchema = new mongoose.Schema({
  userId: Number,
  groupId: Number,
  date: String,
  ten: String,
  acc: Number,
  tinh_tien: Number,
});

const Trasua = mongoose.model('Trasua', trasuaSchema);


//ƒê·ªãnh nghƒ©a schema cho th√†nh vi√™n
const MemberSchema = new mongoose.Schema({
  userId: { type: Number, unique: true },
  fullname: String,
  level: Number,
  previousQuay: Number,
  previousKeo: Number,
  levelPercent: Number,
  exp: { type: Number, default: 0 },
  consecutiveDays: { type: Number, default: 0 },
  lastSubmissionDate: { type: Date, default: null },
  lastConsecutiveUpdate: { type: Date, default: null }, // Th√™m tr∆∞·ªùng n√†y
  assets: {
    quay: Number,
    keo: Number,
    vnd: Number
  },
  hasInteracted: { type: Boolean, default: false } // New field to track interaction
});

// ƒê·ªãnh nghƒ©a schema cho tin nh·∫Øn
const MessageSchema = new mongoose.Schema({
  messageId: Number,
  userId: Number,
  chatId: Number,
  text: String,
  date: { type: Date, default: Date.now }
});

// ƒê·ªãnh nghƒ©a schema cho nhi·ªám v·ª• h√†ng ng√†y
const DailyTaskSchema = new mongoose.Schema({
  userId: Number,
  date: Date,
  quayTask: Number,
  keoTask: Number,
  billTask: Number,
  completedQuay: { type: Boolean, default: false },
  completedKeo: { type: Boolean, default: false },
  completedBill: { type: Boolean, default: false }
  
});

// Add this to your schema definitions
const VipCardSchema = new mongoose.Schema({
  userId: Number,
  issueDate: { type: Date, default: Date.now },
  type: { type: String, enum: ['level_up', 'week', 'month'], required: true },
  validFrom: { type: Date, required: true },
  validUntil: { type: Date, required: true },
  expBonus: { type: Number, required: true },
  keoBonus: { type: Number, required: true },
  quayBonus: { type: Number, required: true },
  keoLimit: { type: Number, required: true },
  quayLimit: { type: Number, required: true }
});

// Create a model from the schema
const VipCard = mongoose.model('VipCard', VipCardSchema);

// T·∫°o model t·ª´ schema
const BangCong2 = mongoose.model('BangCong2', BangCongSchema);

// ƒê·ªãnh nghƒ©a schema cho tr·∫°ng th√°i h√†ng ng√†y
const DailyGiftStatusSchema = new mongoose.Schema({
  date: String,
  dailyGiftClaims: [Number], // Danh s√°ch c√°c user ƒë√£ nh·∫≠n qu√†
  giftWonToday: { type: Boolean, default: false },
});

const DailyGiftStatus = mongoose.model('DailyGiftStatus', DailyGiftStatusSchema);
//T·∫°o model t·ª´ schema
const Member = mongoose.model('Member', MemberSchema);
const Message = mongoose.model('Message', MessageSchema);
const DailyTask = mongoose.model('DailyTask', DailyTaskSchema);

const token = '7150645082:AAH-N2VM6qx3iFEhK59YHx2e1oy3Bi1EzXc';
const url = 'https://bot-farm-twjg.onrender.com'; // URL c·ªßa webhook
const port = process.env.PORT || 3000;


// Kh·ªüi t·∫°o bot v·ªõi ch·∫ø ƒë·ªô webhook
const bot = new TelegramBot(token, { webHook: { port: port } });
// Thi·∫øt l·∫≠p webhook c·ªßa b·∫°n
bot.setWebHook(`${url}/bot${token}`);

// Kh·ªüi t·∫°o express server
const app = express();
app.use(bodyParser.json());

// ƒê·ªãnh nghƒ©a route cho webhook
app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});
// Chu·ªói c·∫•mm
const bannedStringsRegex = /(ca\s?1|ca1|ca\s?2|Ca\s?2|Ca\s?1|Ca1|Ca\s?2|Ca2|C1|C2|c\s?1|c\s?2|C\s?1|C\s?2)\s*/gi;

// Thi·∫øt l·∫≠p cron job ƒë·ªÉ x√≥a d·ªØ li·ªáu b·∫£ng c√¥ng c·ªßa 2 ng√†y tr∆∞·ªõc, ngo·∫°i tr·ª´ b·∫£ng c√¥ng c√≥ groupId -1002108234982
cron.schedule('0 0 * * *', async () => {
  const twoDaysAgo = new Date();
  twoDaysAgo.setDate(twoDaysAgo.getDate() - 4);
  const formattedTwoDaysAgo = new Date(twoDaysAgo.toLocaleDateString());

  try {
    const result = await BangCong2.deleteMany({
      date: formattedTwoDaysAgo,
      groupId: { $ne: -1002108234982 }, // Lo·∫°i tr·ª´ c√°c b·∫£ng c√¥ng v·ªõi groupId n√†y
    });
    console.log(`ƒê√£ x√≥a ${result.deletedCount} b·∫£ng c√¥ng c·ªßa ng√†y ${formattedTwoDaysAgo.toLocaleDateString()}`);
  } catch (error) {
    console.error("L·ªói khi x√≥a d·ªØ li·ªáu t·ª´ MongoDB:", error);
  }
});

// H√†m ƒë·ªÉ x√≥a c√°c th·∫ª VipCard ƒë√£ h·∫øt hi·ªáu l·ª±c
const deleteExpiredVipCards = async () => {
  const now = new Date();
  now.setHours(0, 0, 0, 0);
  await VipCard.deleteMany({ validUntil: { $lt: now } });
  console.log('ƒê√£ x√≥a c√°c th·∫ª VIP ƒë√£ h·∫øt hi·ªáu l·ª±c.');
};

// Thi·∫øt l·∫≠p c√¥ng vi·ªác cron ƒë·ªÉ ch·∫°y l√∫c 0h m·ªói ng√†y
cron.schedule('0 0 * * *', deleteExpiredVipCards);


// Thi·∫øt l·∫≠p cron job ƒë·ªÉ x√≥a d·ªØ li·ªáu DailyTask c·ªßa nh·ªØng ng√†y tr∆∞·ªõc ƒë√≥
cron.schedule('0 0 * * *', async () => {
  const currentDate = new Date().setHours(0, 0, 0, 0);

  try {
    const result = await DailyTask.deleteMany({
      $or: [
        { date: { $lt: currentDate } },
        { date: { $exists: false } }
      ]
    });
    console.log(`ƒê√£ x√≥a ${result.deletedCount} nhi·ªám v·ª• h√†ng ng√†y tr∆∞·ªõc ng√†y ${new Date(currentDate).toLocaleDateString()}`);
  } catch (error) {
    console.error("L·ªói khi x√≥a d·ªØ li·ªáu t·ª´ MongoDB:", error);
  }
});

const accRegex = /xong\s*\d+\s*acc/i;

// ƒêƒÉng k√Ω s·ª± ki·ªán cho bot
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

    // Ch·ªâ ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i l√† nh√≥m c√≥ ID
  if (chatId !== -1002103270166) {
  
    // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a t·ª´ kh√≥a "xong (s·ªë) acc"
    const messageContent = msg.text || msg.caption;
    if (messageContent && /xong\s*\d+\s*acc/gi.test(messageContent)) {
      await processAccMessage(msg); // G·ªçi h√†m x·ª≠ l√Ω tin nh·∫Øn t·ª´ acc.js
    }
  }
});

async function processAccMessage(msg) {
  const messageContent = msg.text || msg.caption;
  const accMatches = messageContent.match(accRegex);
  const userId = msg.from.id;
  const groupId = msg.chat.id;

  let acc = 0;

  if (accMatches) {
    accMatches.forEach((match) => {
      const number = parseInt(match.match(/\d+/)[0]); // L·∫•y s·ªë acc
      acc += number; // Th√™m v√†o s·ªë acc
    });
  }

  const currentDate = new Date().toLocaleDateString();
  const firstName = msg.from.first_name;
  const lastName = msg.from.last_name;
  const fullName = lastName ? `${firstName} ${lastName}` : firstName;

  let totalMoney = acc * 5000; // T√≠nh ti·ªÅn cho s·ªë Acc

  const responseMessage = `B√†i n·ªôp c·ªßa ${fullName} ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v·ªõi ${acc} Acc ƒëang ch·ªù ki·ªÉm tra ‚ù§ü•≥`;

  bot.sendMessage(groupId, responseMessage, { reply_to_message_id: msg.message_id }).then(async () => {
    let trasua = await Trasua.findOne({ userId, groupId, date: currentDate });

    if (!trasua) {
      trasua = await Trasua.create({
        userId,
        groupId,
        date: currentDate,
        ten: fullName,
        acc,
        tinh_tien: totalMoney,
      });
    } else {
      trasua.acc += acc;
      trasua.tinh_tien += totalMoney;
      await trasua.save();
    }
  });
}


// L·ªánh /thom ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng c√¥ng t·ªïng
bot.onText(/\/thom/, async (msg) => {
  const chatId = msg.chat.id;
  const currentDate = new Date().toLocaleDateString();

  // T√¨m c√°c b·∫£n ghi b·∫£ng c√¥ng c√≥ groupId -1002163768880 trong ng√†y hi·ªán t·∫°i
  const bangCongList = await Trasua.find({ groupId: -1002163768880, date: currentDate });
  if (bangCongList.length === 0) {
    bot.sendMessage(chatId, 'Ch∆∞a c√≥ b·∫£ng c√¥ng n√†o ƒë∆∞·ª£c ghi nh·∫≠n trong ng√†y h√¥m nay.');
    return;
  }

  let responseMessage = `B·∫¢NG C√îNG NH√ìM ZALO THOM - ${new Date().toLocaleDateString('vi-VN', { day: '2-digit', month: '2-digit' })}\n\n`;
  let totalMoney = 0;

  bangCongList.forEach(entry => {
    responseMessage += `${entry.ten}: ${entry.acc} Acc ${entry.tinh_tien.toLocaleString()} VNƒê\n\n`;
    totalMoney += entry.tinh_tien;
  });

  responseMessage += `T·ªïng ti·ªÅn: ${totalMoney.toLocaleString()} VNƒê`;

  bot.sendMessage(chatId, responseMessage);
});



// T√¨m c√°c s·ªë theo sau b·ªüi k√Ω t·ª± ho·∫∑c t·ª´ kh√≥a x√°c ƒë·ªãnh h√†nh vi
const regex = /\d+(ca1|ca2|q|Q|c|C)/gi;

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

// Ch·ªâ ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i l√† nh√≥m c√≥ ID
  if (chatId !== -1002103270166 && chatId !== -1002163768880) {
    // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a chu·ªói c·∫•m
    // Ki·ªÉm tra c·∫£ vƒÉn b·∫£n v√† ch√∫ th√≠ch
    const messageContent = msg.text || msg.caption;
    if (messageContent) {
      // Ch·ªâ th·ª±c hi·ªán ki·ªÉm tra b·∫£ng c√¥ng n·∫øu tin nh·∫Øn ch·ª©a chu·ªói c·∫•m
      if (regex.test(messageContent)) {
        processMessage(msg); // X·ª≠ l√Ω tin nh·∫Øn tr·ª±c ti·∫øp
      }
    }
  }
});

async function processMessage(msg) {
  const messageContent = msg.text || msg.caption;
  const matches = messageContent.match(regex);
  const userId = msg.from.id;
  const groupId = msg.chat.id;

  let quay = 0;
  let keo = 0;

  if (matches) {
    matches.forEach((match) => {
      const number = parseInt(match); // L·∫•y s·ªë
      const suffix = match.slice(number.toString().length); // L·∫•y ch·ªØ c√°i ho·∫∑c t·ª´ theo sau s·ªë

      if (suffix.toLowerCase() === 'q' || suffix.toLowerCase() === 'p') {
        quay += number; // N·∫øu sau s·ªë l√† "q" ho·∫∑c "Q", th√™m v√†o "quay"
      } else if (suffix.toLowerCase() === 'c' || suffix === '+') {
        keo += number; // N·∫øu sau s·ªë l√† "c", "C", ho·∫∑c "acc", th√™m v√†o "keo"
      } else if (suffix === 'qu·∫©y') {
        quay += number; // N·∫øu sau s·ªë l√† "qu·∫©y", th√™m v√†o "quay"
      } else if (suffix === 'c·ªông') {
        keo += number; // N·∫øu sau s·ªë l√† "c·ªông", th√™m v√†o "keo"
      }
    });
  }

  const currentDate = new Date().toLocaleDateString();
  const firstName = msg.from.first_name;
  const lastName = msg.from.last_name;
  const fullName = lastName ? `${firstName} ${lastName}` : firstName;

  const vipCard = await VipCard.findOne({
    userId,
    validFrom: { $lte: new Date() },
    validUntil: { $gte: new Date() }
  });

  let pricePerQuay = 500;
  let pricePerKeo = 1000;
  let pricePerKeoBonus = 0;
  let pricePerQuayBonus = 0;
  let exp = 0;

  if (vipCard) {
    if (vipCard.type === 'level_up') {
      pricePerQuay = 600;
      pricePerKeo = 1100;
    } else if (vipCard.type === 'week' || vipCard.type === 'month') {
      pricePerQuay = 600;
      pricePerKeo = 1100;
      exp = vipCard.expBonus;
    }

    if (vipCard.keoLimit && keo > vipCard.keoLimit) {
      const remainingKeo = vipCard.keoLimit;
      pricePerKeo = 1000;
      pricePerKeoBonus = remainingKeo * 100;
    }

    if (vipCard.quayLimit && quay > vipCard.quayLimit) {
      const remainingQuay = vipCard.quayLimit;
      pricePerQuay = 500;
      pricePerQuayBonus = remainingQuay * 100;
    }
  }

  const responseMessage = `B√†i n·ªôp c·ªßa ${fullName} ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v·ªõi ${quay}q, ${keo}c ƒëang ch·ªù ki·ªÉm tra ‚ù§ü•≥`;

  bot.sendMessage(groupId, responseMessage, { reply_to_message_id: msg.message_id }).then(async () => {
    let bangCong = await BangCong2.findOne({ userId, groupId, date: currentDate });

    if (!bangCong) {
      bangCong = await BangCong2.create({
        userId,
        groupId,
        date: currentDate,
        ten: fullName,
        quay,
        keo,
        tinh_tien: (quay * pricePerQuay + keo * pricePerKeo) + (pricePerKeoBonus + pricePerQuayBonus),
      });
    } else {
      bangCong.quay += quay;
      bangCong.keo += keo;
      bangCong.tinh_tien += (quay * pricePerQuay + keo * pricePerKeo) + (pricePerKeoBonus + pricePerQuayBonus);

      const member = await Member.findOne({ userId });
      member.exp += exp;

      if (exp > 0) {
        member.levelPercent += Math.floor(exp / 10);
      }

      await bangCong.save();
    }

    await updateLevelPercent(userId);
    await updateMissionProgress(userId);
  });
}

        
       
const kickbot = {
  "-1002039100507": "C·ªòNG ƒê·ªíNG N·∫ÆM B·∫ÆT C∆† H·ªòI",
  "-1002004082575": "H·ªôi Nh√≥m",
  "-1002123430691": "D·∫™N L·ªêI TH√ÄNH C√îNG",
  "-1002143712364": "C√ôNG NHAU CHIA S·∫∫",
  "-1002128975957": "H∆Ø·ªöNG T·ªöI T∆Ø∆†NG LAI",
  "-1002080535296": "TRAO ƒê·ªîI C√îNG VI·ªÜC 2",
  "-1002091101362": "TRAO ƒê·ªîI C√îNG VI·ªÜC 1", 
  "-1002129896837": "GROUP I M·∫†NH ƒê·ª®C CHIA S·∫∫", 
  "-1002228252389": "ORMARKET community",
  "-1002103270166": "T·ªïng bank",
  "-1002128289933": "test",
  "-1002108234982": "community free",
  "-1002163768880": "tra sua",
  "-4201367303": "L√ÄM GI√ÄU C√ôNG NHAU"
};                                                        
          
// B·∫£ng tra c·ª©u t√™n nh√≥m d·ª±a tr√™n ID nh√≥m
const groupNames = {
  "-1002039100507": "C·ªòNG ƒê·ªíNG N·∫ÆM B·∫ÆT C∆† H·ªòI",
  "-1002004082575": "H·ªôi Nh√≥m",
  "-1002123430691": "D·∫™N L·ªêI TH√ÄNH C√îNG",
  "-1002143712364": "C√ôNG NHAU CHIA S·∫∫",
  "-1002128975957": "H∆Ø·ªöNG T·ªöI T∆Ø∆†NG LAI",
  "-1002080535296": "TRAO ƒê·ªîI C√îNG VI·ªÜC 2",
  "-1002091101362": "TRAO ƒê·ªîI C√îNG VI·ªÜC 1", 
  "-1002129896837": "GROUP I M·∫†NH ƒê·ª®C CHIA S·∫∫", 
  "-1002228252389": "ORMARKET community",
  "-4201367303": "L√ÄM GI√ÄU C√ôNG NHAU" 
};

bot.onText(/\/sum/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    // G·ªçi h√†m t·ªïng h·ª£p d·ªØ li·ªáu v√† g·ª≠i b·∫£ng c√¥ng t·ªïng h·ª£p
    await sendAggregatedData(chatId);
  } catch (error) {
    console.error("L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ MongoDB:", error);
    bot.sendMessage(chatId, "ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu.");
  }
});

async function sendAggregatedData(chatId) {
  try {
    const currentDate = new Date();
    currentDate.setDate(currentDate.getDate() - 1); // Ng√†y h√¥m qua

    const startOfYesterday = new Date(currentDate.setHours(0, 0, 0, 0)); // B·∫Øt ƒë·∫ßu c·ªßa ng√†y h√¥m qua
    const endOfYesterday = new Date(currentDate.setHours(23, 59, 59, 999)); // K·∫øt th√∫c c·ªßa ng√†y h√¥m qua

    // L·∫•y danh s√°ch c√°c groupId c·∫ßn t√≠nh to√°n
    const groupIds = Object.keys(groupNames).map(id => parseInt(id, 10));

    // Truy v·∫•n ƒë·ªÉ t·ªïng h·ª£p b·∫£ng c√¥ng c·ªßa c√°c th√†nh vi√™n trong ng√†y h√¥m qua
    const aggregatedData = await BangCong2.aggregate([
      {
        $match: {
          date: { $gte: startOfYesterday, $lte: endOfYesterday },
          groupId: { $in: groupIds } // Ch·ªâ l·∫•y c√°c nh√≥m trong groupNames
        },
      },
      {
        $group: {
          _id: {
            userId: "$userId",
            ten: "$ten",
          },
          totalQuay: { $sum: "$quay" },
          totalKeo: { $sum: "$keo" },
          totalTinhTien: { $sum: "$tinh_tien" },
        },
      },
      {
        $sort: { totalTinhTien: -1 }, // S·∫Øp x·∫øp theo t·ªïng ti·ªÅn gi·∫£m d·∫ßn
      },
    ]);

    if (aggregatedData.length === 0) {
      if (chatId) {
        bot.sendMessage(chatId, "Kh√¥ng c√≥ b·∫£ng c√¥ng n√†o cho ng√†y h√¥m qua.");
      }
      return;
    }

    let response = "B·∫£ng c√¥ng t·ªïng h·ª£p cho ng√†y h√¥m qua:\n\n";
    response += "H·ªå T√äNüë©‚Äçüé§\t\tQU·∫®YüíÉ\tC·ªòNG‚ûï\tT·ªîNG TI·ªÄNüí∞\n";

    aggregatedData.forEach((data) => {
      const formattedTotal = data.totalTinhTien.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      response += `${data._id.ten}\t\t${data.totalQuay}q +\t${data.totalKeo}c\t${formattedTotal}vnƒë\n`;
    });

    if (chatId) {
      bot.sendMessage(chatId, response);
    } else {
      // B·∫°n c√≥ th·ªÉ thay ƒë·ªïi logic g·ª≠i tin nh·∫Øn n·∫øu kh√¥ng c√≥ chatId
    }
  } catch (error) {
    console.error("L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ MongoDB:", error);
    if (chatId) {
      bot.sendMessage(chatId, "ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu.");
    }
  }
}



// L·ªánh /reset ƒë·ªÉ x√≥a b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc
bot.onText(/\/reset/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    // Ng√†y hi·ªán t·∫°i
    const currentDate = new Date().toLocaleDateString();
    
    // X√≥a t·∫•t c·∫£ b·∫£ng c√¥ng c√≥ ng√†y tr∆∞·ªõc ng√†y hi·ªán t·∫°i
    const result = await BangCong2.deleteMany({
      date: { $lt: currentDate },
      groupId: { $ne: -1002108234982 }, // Lo·∫°i tr·ª´ nh√≥m c√≥ chatId -1002050799248
    });

    bot.sendMessage(chatId, `ƒê√£ x√≥a ${result.deletedCount} b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc.`);
  } catch (error) {
    console.error('L·ªói khi x√≥a b·∫£ng c√¥ng:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi x√≥a b·∫£ng c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
  }
});

// H√†m lo·∫°i b·ªè icon v√† emoji t·ª´ t√™n
const normalizeName = (name) => {
  // Lo·∫°i b·ªè c√°c icon, emoji ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng ph·∫£i ch·ªØ c√°i
  return name.replace(/[^\w\s]/gi, '').toLowerCase().trim();
};



bot.onText(/\/edit (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const input = match[1].split(',').map(item => item.trim());
    const groupCode = input[0];
    const ten = input[1];
    const quay = input[2];
    const keo = input[3];
    const date = input[4];

    if (!groupCode || !ten || !quay || !keo || !date) {
        bot.sendMessage(chatId, 'Sai c√∫ ph√°p. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /edit groupId, t√™n th√†nh vi√™n, s·ªë quay, s·ªë keo, ng√†y/th√°ng');
        return;
    }

    const groupId = groupCodes[groupCode];
    if (!groupId) {
        bot.sendMessage(chatId, `M√£ nh√≥m kh√¥ng h·ª£p l·ªá: ${groupCode}`);
        return;
    }

    const [day, month] = date.split('/');
    const year = new Date().getFullYear();
    const entryDate = new Date(year, month - 1, day);

    try {
        // T√¨m ki·∫øm th√†nh vi√™n g·∫ßn ƒë√∫ng
        const regex = new RegExp(ten.split('').join('.*'), 'i');
        const bangCong = await BangCong2.findOne({
            groupId: Number(groupId),
            ten: { $regex: regex },
            date: entryDate
        });

        if (!bangCong) {
            bot.sendMessage(chatId, `Kh√¥ng t√¨m th·∫•y b·∫£n ghi ƒë·ªÉ c·∫≠p nh·∫≠t cho ${ten.trim()} v√†o ng√†y ${date}.`);
            return;
        }

        bangCong.quay = Number(quay);
        bangCong.keo = Number(keo);
        bangCong.tinh_tien = (Number(quay.trim()) * 500) + (Number(keo.trim()) * 1000); // Gi·∫£ ƒë·ªãnh t√≠nh ti·ªÅn c√¥ng l√† t·ªïng s·ªë quay v√† keo nh√¢n 1000
        await bangCong.save();

        bot.sendMessage(chatId, `C·∫≠p nh·∫≠t th√†nh c√¥ng cho ${ten.trim()} v√†o ng√†y ${date}.`);
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu:', error);
        bot.sendMessage(chatId, 'L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu.');
    }
});

// C√°c x·ª≠ l√Ω kh√°c (v√≠ d·ª•: x·ª≠ l√Ω message)
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  // C√°c ƒëo·∫°n m√£ kh√°c nh∆∞ x·ª≠ l√Ω b·∫£ng c√¥ng...
});

// L·ªánh /bc2 ƒë·ªÉ xem b·∫£ng c√¥ng t·ª´ng ng√†y c·ªßa nh√≥m -1002050799248 v√† b·∫£ng t·ªïng s·ªë ti·ªÅn c·ªßa t·ª´ng th√†nh vi√™n trong b·∫£ng c√¥ng c√°c ng√†y
bot.onText(/\/bangcong2/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const currentDate = new Date().toLocaleDateString();

    // T√¨m t·∫•t c·∫£ b·∫£ng c√¥ng cho nh√≥m -1002050799248
    const bangCongs = await BangCong2.find({ groupId: -1002108234982 });

    if (bangCongs.length === 0) {
      bot.sendMessage(chatId, "Kh√¥ng c√≥ b·∫£ng c√¥ng n√†o cho nh√≥m Be truly rich");
      return;
    }

    // Ph√¢n lo·∫°i b·∫£ng c√¥ng theo ng√†y
    const groupedByDate = {};
    bangCongs.forEach((bangCong) => {
      const date = bangCong.date;
      if (!groupedByDate[date]) {
        groupedByDate[date] = [];
      }
      groupedByDate[date].push(bangCong);
    });

    let response = '';

    // T·∫°o b·∫£ng c√¥ng cho t·ª´ng ng√†y
    for (const date in groupedByDate) {
      const dayData = groupedByDate[date];
      response += `B·∫£ng c√¥ng ng√†y ${date}:\n\n`;

      dayData.forEach((bangCong) => {
        const formattedTien = bangCong.tinh_tien.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
        response += `${bangCong.ten}\t\t${bangCong.quay}q +\t${bangCong.keo}c\t${formattedTien}vnƒë\n`;
      });

      response += '\n';
    }

    // T√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa t·ª´ng th√†nh vi√™n
    const totalByMember = {};
    bangCongs.forEach((bangCong) => {
      if (!totalByMember[bangCong.ten]) {
        totalByMember[bangCong.ten] = 0;
      }
      totalByMember[bangCong.ten] += bangCong.tinh_tien;
    });

    response += 'B·∫£ng t·ªïng s·ªë ti·ªÅn c·ªßa t·ª´ng th√†nh vi√™n:\n\n';
    let totalSum = 0;
    for (const member in totalByMember) {
      const formattedTotal = totalByMember[member].toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      response += `${member}: ${formattedTotal}vnƒë\n`;
      totalSum += totalByMember[member];
    }

    // T√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa t·∫•t c·∫£ th√†nh vi√™n
    const formattedTotalSum = totalSum.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
    response += `\nT·ªïng s·ªë ti·ªÅn c·ªßa t·∫•t c·∫£ th√†nh vi√™n: ${formattedTotalSum}vnƒë\n`;

    bot.sendMessage(chatId, response.trim());
  } catch (error) {
    console.error('L·ªói khi truy v·∫•n b·∫£ng c√¥ng:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n b·∫£ng c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
  }
});

// L·ªánh /reset2 ƒë·ªÉ x√≥a b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc t·ª´ nh√≥m c√≥ chatId -1002050799248
bot.onText(/\/xoa/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const currentDate = new Date().toLocaleDateString();

    // X√≥a t·∫•t c·∫£ b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc cho nh√≥m c√≥ chatId -1002050799248
    const result = await BangCong2.deleteMany({
      date: { $lt: currentDate },
      groupId: -1002108234982, // Ch·ªâ x√≥a b·∫£ng c√¥ng c·ªßa nh√≥m n√†y
    });

    bot.sendMessage(chatId, `ƒê√£ x√≥a ${result.deletedCount} b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc t·ª´ nh√≥m -1002050799248.`);
  } catch (error) {
    console.error('L·ªói khi x√≥a b·∫£ng c√¥ng:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi x√≥a b·∫£ng c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
  }
});

bot.onText(/\/delete(\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;

  try {
    // L·∫•y s·ªë ng√†y t·ª´ l·ªánh
    const days = parseInt(match[1], 10);

    // L·∫•y ng√†y hi·ªán t·∫°i
    const currentDate = new Date();
    // Tr·ª´ s·ªë ng√†y ƒë·ªÉ l·∫•y ng√†y c·ªßa (s·ªë ng√†y) tr∆∞·ªõc
    currentDate.setDate(currentDate.getDate() - days);
    const targetDate = currentDate.toLocaleDateString();

    // X√≥a t·∫•t c·∫£ b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y t·ª´ (s·ªë ng√†y) tr∆∞·ªõc tr·ªü ƒëi cho nh√≥m c√≥ chatId -1002050799248
    const result = await BangCong2.deleteMany({
      date: { $lt: targetDate },
      groupId: -1002108234982, // Ch·ªâ x√≥a b·∫£ng c√¥ng c·ªßa nh√≥m n√†y
    });

    bot.sendMessage(chatId, `ƒê√£ x√≥a ${result.deletedCount} b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y t·ª´ ${days} ng√†y tr∆∞·ªõc t·ª´ nh√≥m -1002050799248.`);
  } catch (error) {
    console.error('L·ªói khi x√≥a b·∫£ng c√¥ng:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi x√≥a b·∫£ng c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
  }
});




// L·∫≠p l·ªãch g·ª≠i b·∫£ng c√¥ng t·ªïng h·ª£p v√†o 9h12 s√°ng h√†ng ng√†y theo gi·ªù Vi·ªát Nam
cron.schedule('31 7 * * *', async () => {
  try {
    // G·ª≠i b·∫£ng c√¥ng t·ªïng h·ª£p v√†o groupId -1002128289933
    await sendAggregatedData(-1002128289933);
  } catch (error) {
    console.error("L·ªói khi g·ª≠i b·∫£ng c√¥ng t·ªïng h·ª£p:", error);
  }
}, {
  scheduled: true,
  timezone: "Asia/Ho_Chi_Minh"
});

// X·ª≠ l√Ω l·ªánh /homqua ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng c√¥ng cho t·∫•t c·∫£ c√°c nh√≥m
bot.onText(/\/homqua/, async (msg) => {
  const chatId = msg.chat.id;
  await sendAggregatedData(chatId);
});

async function sendAggregatedData(chatId) {
  try {
    // T√≠nh ng√†y h√¥m qua
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const startOfYesterday = new Date(yesterday.setHours(0, 0, 0, 0));
    const endOfYesterday = new Date(yesterday.setHours(23, 59, 59, 999));
    
    // L·∫•y b·∫£ng c√¥ng c·ªßa ng√†y h√¥m qua, lo·∫°i tr·ª´ nh√≥m c√≥ chatId -1002108234982
    const bangCongs = await BangCong2.find({
      date: { $gte: startOfYesterday, $lte: endOfYesterday },
      groupId: { $ne: -1002108234982 }, // Lo·∫°i tr·ª´ nh√≥m n√†y
    });

    if (bangCongs.length === 0) {
      bot.sendMessage(chatId, `Kh√¥ng c√≥ b·∫£ng c√¥ng n√†o cho ng√†y ${yesterday.toLocaleDateString()}.`);
      return;
    }

    // T·∫°o b·∫£ng c√¥ng ph√¢n lo·∫°i theo ID nh√≥m
    const groupedByGroupId = {};
    bangCongs.forEach((bangCong) => {
      const groupId = bangCong.groupId ? bangCong.groupId.toString() : '';
      if (!groupedByGroupId[groupId]) {
        groupedByGroupId[groupId] = [];
      }
      groupedByGroupId[groupId].push(bangCong);
    });

    let response = '';

    // T·∫°o b·∫£ng c√¥ng cho m·ªói nh√≥m
    for (const groupId in groupedByGroupId) {
      if (!groupId) {
        continue;
      }

      const groupData = groupedByGroupId[groupId];
      const groupName = groupNames[groupId] || `Nh√≥m ${groupId}`;

      response += `B·∫£ng c√¥ng nh√≥m ${groupName} (${yesterday.toLocaleDateString()}):\n\n`;

      let totalGroupMoney = 0;

      groupData.forEach((bangCong) => {
        if (bangCong.tinh_tien !== undefined) {
          const formattedTien = bangCong.tinh_tien.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
          response += `${bangCong.ten}\t\t${bangCong.quay}q +\t${bangCong.keo}c\t${formattedTien}vnƒë\n`;
          totalGroupMoney += bangCong.tinh_tien;
        }
      });

      const formattedTotal = totalGroupMoney.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      response += `T·ªïng ti·ªÅn: ${formattedTotal}vnƒë\n\n`;
    }

    // Ki·ªÉm tra ƒë·ªô d√†i response v√† g·ª≠i tin nh·∫Øn
    if (response.length > 4000) {
      const middle = Math.floor(response.length / 2);
      const splitIndex = response.lastIndexOf('\n', middle);

      const firstPart = response.substring(0, splitIndex).trim();
      const secondPart = response.substring(splitIndex).trim();

      bot.sendMessage(chatId, firstPart);
      bot.sendMessage(chatId, secondPart);
    } else {
      bot.sendMessage(chatId, response.trim());
    }
  } catch (error) {
    console.error('L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ MongoDB:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu.');
  }
}

const groupCodes = {
  "cƒënbch": "-1002039100507",
  "kttn": "-1002004082575",
  "dltc": "-1002123430691",
  "cncs": "-1002143712364",
  "bƒëkn": "-1002128975957",
  "tƒëcv2": "-1002080535296",
  "tƒëcv1": "-1002091101362",
  "gimƒëcs": "-1002129896837",
  "cf": "-1002108234982",
  "tgu": "-1002228252389", 
  "lgcn": "-4201367303" 
};

const groups = {
  "-1002039100507": "B·∫¢NG C√îNG NH√ìM C·ªòNG ƒê·ªíNG N·∫ÆM B·∫ÆT C∆† H·ªòI",
  "-1002004082575": "B·∫¢NG C√îNG NH√ìM KI·∫æM TH√äM THU NH·∫¨P",
  "-1002123430691": "B·∫¢NG C√îNG NH√ìM D·∫™N L·ªêI TH√ÄNH C√îNG",
  "-1002143712364": "B·∫¢NG C√îNG NH√ìM C√ôNG NHAU CHIA S·∫∫",
  "-1002128975957": "B·∫¢NG C√îNG NH√ìM B∆Ø·ªöC ƒêI KH·ªûI NGHI·ªÜP",
  "-1002080535296": "B·∫¢NG C√îNG NH√ìM TRAO ƒê·ªîI C√îNG VI·ªÜC 2",
  "-1002091101362": "B·∫¢NG C√îNG NH√ìM TRAO ƒê·ªîI C√îNG VI·ªÜC 1", 
  "-1002129896837": "B·∫¢NG C√îNG NH√ìM GROUP I M·∫†NH ƒê·ª®C CHIA S·∫∫", 
  "-1002228252389": "B·∫¢NG C√îNG NH√ìM TECH GEEK UNITES", 
  "-4201367303": "L√ÄM GI√ÄU C√ôNG NHAU" 
};


let excludedGroups = [];
let additionalGroupsByDate = {}; // Object to store additional groups by date

// H√†m parse group codes
function parseGroupCodes(text) {
  return text.split(',').map(code => code.trim().toLowerCase());
}

// L·ªánh /tempo: b·ªè qua b·∫£ng c√¥ng c√°c nh√≥m
bot.onText(/\/tempo\s+\[([^\]]+)\]/, (msg, match) => {
  const chatId = msg.chat.id;
  const groupCodesToExclude = parseGroupCodes(match[1]);

  excludedGroups = groupCodesToExclude.map(code => groupCodes[code]);
  bot.sendMessage(chatId, `ƒê√£ b·ªè qua b·∫£ng c√¥ng c√°c nh√≥m: ${groupCodesToExclude.join(', ')}`);
});

// L·ªánh /add: th√™m b·∫£ng c√¥ng c√°c nh√≥m t·ª´ ng√†y/th√°ng c·ª• th·ªÉ
bot.onText(/\/add\s+\[([^\]]+)\]\s+(\d{1,2})\/(\d{1,2})/, (msg, match) => {
  const chatId = msg.chat.id;
  const groupCodesToAdd = parseGroupCodes(match[1]);
  const day = parseInt(match[2]);
  const month = parseInt(match[3]);

  const dateStr = `${day}/${month}`;

  if (!additionalGroupsByDate[dateStr]) {
    additionalGroupsByDate[dateStr] = [];
  }

  groupCodesToAdd.forEach(code => {
    const groupId = groupCodes[code];
    if (!additionalGroupsByDate[dateStr].includes(groupId)) {
      additionalGroupsByDate[dateStr].push(groupId);
    }
  });

  bot.sendMessage(chatId, `ƒê√£ ghi nh·ªõ c√°c nh√≥m: ${groupCodesToAdd.join(', ')} ng√†y ${dateStr} s·∫Ω ƒë∆∞·ª£c t√≠nh th√™m`);
});

 // C·∫≠p nh·∫≠t t·ª± ƒë·ªông t√™n nh√≥m v√†o ƒë·ªëi t∆∞·ª£ng groups
bot.on('message', (msg) => {
  const chatId = msg.chat.id.toString();
  const chatTitle = msg.chat.title;

  if (chatId && chatTitle) {
    groups[chatId] = chatTitle;
  }
});

// Ch·ª©c nƒÉng t·ª± ƒë·ªông g·ª≠i h√¨nh ·∫£nh v√†o 9h s√°ng m·ªói ng√†y (theo gi·ªù Vi·ªát Nam)
cron.schedule('30 13 * * *', async () => { // 2 gi·ªù UTC l√† 9 gi·ªù s√°ng theo gi·ªù Vi·ªát Nam
  const chatId = '-1002103270166';
  await generateAndSendImages(chatId);
});

async function generateAndSendImages(chatId) {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  const startOfYesterday = new Date(yesterday);
  startOfYesterday.setHours(0, 0, 0, 0);
  const endOfYesterday = new Date(yesterday);
  endOfYesterday.setHours(23, 59, 59, 999);
  const dateStr = `${yesterday.getDate()}/${yesterday.getMonth() + 1}`;

  try {
    let totalAmountByUser = {}; // ƒê·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u t·ªïng s·ªë ti·ªÅn c·ªßa m·ªói ng∆∞·ªùi d√πng
    const allGroups = [...Object.keys(groups), ...(additionalGroupsByDate[dateStr] || [])];

    for (const groupId of allGroups) {
      if (excludedGroups.includes(groupId)) continue; // B·ªè qua c√°c nh√≥m trong danh s√°ch lo·∫°i tr·ª´

      const groupName = groups[groupId] || `Nh√≥m ${groupId}`;
      const bangCongs = await BangCong2.find({
        date: { $gte: startOfYesterday, $lte: endOfYesterday },
        groupId: Number(groupId)
      });

      if (bangCongs.length === 0) {
        bot.sendMessage(chatId, `Kh√¥ng c√≥ d·ªØ li·ªáu b·∫£ng c√¥ng cho ng√†y h√¥m qua cho nh√≥m ${groupName}.`);
        continue;
      }

      let totalAmount = 0;
      let content = bangCongs.map(bangCong => {
        totalAmount += bangCong.tinh_tien;
        totalAmountByUser[bangCong.ten] = (totalAmountByUser[bangCong.ten] || 0) + bangCong.tinh_tien;
        return `${bangCong.ten}\t${bangCong.quay}\t${bangCong.keo}\t${bangCong.tinh_tien}vnƒë`;
      }).join('\n');

      const imageUrl = await createImage(content, groupName, totalAmount, dateStr);
      await bot.sendPhoto(chatId, imageUrl);
    }

    let totalAmountContent = '';
    for (const [userName, totalAmount] of Object.entries(totalAmountByUser)) {
      totalAmountContent += `<TR><TD ALIGN="LEFT" STYLE="font-weight: bold;">${userName}</TD><TD ALIGN="CENTER">${totalAmount}vnƒë</TD></TR>`;
    }
    const totalAmountImageUrl = await createTotalAmountImage(totalAmountContent);
    await bot.sendPhoto(chatId, totalAmountImageUrl);

    const messages = [
            `Attention, attention! B·∫£ng c√¥ng (${dateStr}) n√≥ng h·ªïi v·ª´a ra l√≤, ai ch∆∞a check ƒëi·ªÉm danh l√† l·ª° m·∫•t c∆° h·ªôi "ƒÉn ƒëi·ªÉm" v·ªõi s·∫øp ƒë√≥ nha!`,
            `Chu√¥ng b√°o th·ª©c ƒë√£ vang! ‚è∞‚è∞‚è∞ B·∫£ng c√¥ng (${dateStr}) ƒë√£ c√≥ m·∫∑t, ai tr·ªÖ h·∫πn l√† "ƒÉn h√†nh" v·ªõi team tr∆∞·ªüng Hieu G√† ƒë√≥ nha!`,           
`Qu√† t·∫∑ng b·∫•t ng·ªù ƒë√¢y! B·∫£ng c√¥ng (${dateStr}) xinh x·∫Øn ƒë√£ ƒë·∫øn tay m·ªçi ng∆∞·ªùi, ai check nhanh s·∫Ω c√≥ qu√† ngon ƒë√≥ nha!`,
`Th√°m t·ª≠ b·∫£ng c√¥ng ƒë√£ xu·∫•t hi·ªán! Ô∏è‚Äç‚ôÄÔ∏èÔ∏è‚Äç‚ôÇÔ∏è H√£y nhanh ch√≥ng ki·ªÉm tra b·∫£ng c√¥ng (${dateStr}) ƒë·ªÉ t√¨m ra "b√≠ ·∫©n" ƒëi·ªÉm s·ªë c·ªßa b·∫°n n√†o!`,
`Vinh danh nh·ªØng chi·∫øn binh c·ªëng hi·∫øn! B·∫£ng c√¥ng (${dateStr}) l√† minh ch·ª©ng cho s·ª± n·ªó l·ª±c c·ªßa b·∫°n, h√£y t·ª± h√†o khoe chi·∫øn c√¥ng v·ªõi m·ªçi ng∆∞·ªùi nh√©!`,
`Nh·∫£y ƒëi n√†o c√°c chi·∫øn binh! B·∫£ng c√¥ng (${dateStr}) s√¥i ƒë·ªông ƒë√£ c√≥ m·∫∑t, h√£y c√πng "phi√™u" theo nh·ªãp ƒëi·ªáu qu·∫©y n√†o!`,
`H·ªçc sinh ngoan ƒë√¢u r·ªìi ƒëi·ªÉm danh! ‚Äç‚ôÄÔ∏è‚Äç‚ôÇÔ∏è B·∫£ng c√¥ng (${dateStr}) ch√≠nh l√† b·∫£ng ƒëi·ªÉm "si√™u c·∫•p" ƒë·ªÉ b·∫°n ƒë√°nh gi√° b·∫£n th√¢n ƒë√≥ nha!`,
`B·∫øp tr∆∞·ªüng ƒë√£i b·∫£ng c√¥ng xin m·ªùi qu√Ω th·ª±c kh√°ch! B·∫£ng c√¥ng (${dateStr}) "ƒë·∫≠m ƒë√†" h∆∞∆°ng v·ªã th√†nh c√¥ng, m·ªùi m·ªçi ng∆∞·ªùi th∆∞·ªüng th·ª©c!`,
`Qu√† t·∫∑ng tri √¢n c·ªßa C·ªß Khoai N√≥ng d√†nh cho "qu·∫©y th·ªß" xu·∫•t s·∫Øc! B·∫£ng c√¥ng (${dateStr}) l√† l·ªùi c·∫£m ∆°n ch√¢n th√†nh c·ªßa c√¥ng ty d√†nh cho nh·ªØng ai ƒë√£ c·ªëng hi·∫øn h·∫øt m√¨nh! ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è`,
`B√πng n·ªï ni·ªÅm vui v·ªõi b·∫£ng c√¥ng (${dateStr})! H√£y c√πng nhau ch√∫c m·ª´ng nh·ªØng th√†nh c√¥ng v√† ti·∫øp t·ª•c ti·∫øn b∆∞·ªõc chinh ph·ª•c nh·ªØng m·ª•c ti√™u m·ªõi!`,
`B·∫£ng c√¥ng (${dateStr}) - Phi√™n b·∫£n "limited edition", h√£y nhanh tay "s∆∞u t·∫ßm" tr∆∞·ªõc khi h·∫øt h√†ng! ‚Äç‚ôÄÔ∏è‚Äç‚ôÇÔ∏è`,
`C·ªß Khoai N√≥ng xin c·∫£nh b√°o: B·∫£ng c√¥ng (${dateStr}) c√≥ th·ªÉ g√¢y nghi·ªán, h√£y c·∫©n th·∫≠n khi s·ª≠ d·ª•ng! ‚ö†Ô∏è`,
`B·∫£ng c√¥ng (${dateStr}) - Phi√™n b·∫£n "limited edition", h√£y nhanh tay "s∆∞u t·∫ßm" tr∆∞·ªõc khi h·∫øt h√†ng! ‚Äç‚ôÄÔ∏è‚Äç‚ôÇÔ∏è`,

        ];
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    const message = await bot.sendMessage(chatId, randomMessage);
    await bot.pinChatMessage(chatId, message.message_id);
  } catch (error) {
    console.error('L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ MongoDB:', error);
    bot.sendMessage(chatId, 'Failed to create image.');
  }
}

async function createImage(content, groupName, totalAmount, dateStr) {
  const url = 'https://quickchart.io/graphviz?format=png&layout=dot&graph=';
  const graph = `
    digraph G {
      node [shape=plaintext];
      a [label=<
        <TABLE BORDER="1" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" STYLE="font-family: 'Arial', sans-serif; border: 1px solid black;">
          <TR><TD COLSPAN="4" ALIGN="CENTER" BGCOLOR="#FFCC00" STYLE="font-size: 16px; font-weight: bold;">${groupName} - ${dateStr}</TD></TR>
          <TR STYLE="font-weight: bold; background-color: #FFCC00;">
            <TD ALIGN="CENTER">T√™n</TD>
            <TD ALIGN="CENTER">Qu·∫©y</TD>
            <TD ALIGN="CENTER">C·ªông</TD>
            <TD ALIGN="CENTER">Ti·ªÅn c√¥ng</TD>
          </TR>
                    ${content.split('\n').map(line => `<TR><TD ALIGN="LEFT" STYLE="font-weight: bold;">${line.split('\t').join('</TD><TD ALIGN="CENTER">')}</TD></TR>`).join('')}
          <TR STYLE="font-weight: bold;">
            <TD COLSPAN="3" ALIGN="LEFT">T·ªïng s·ªë ti·ªÅn</TD>
            <TD ALIGN="CENTER">${totalAmount}vnƒë</TD>
          </TR>
        </TABLE>
      >];
    }
  `;
  const imageUrl = `${url}${encodeURIComponent(graph)}`;
  return imageUrl;
}

async function createTotalAmountImage(content, dateStr) {
  const url = 'https://quickchart.io/graphviz?format=png&layout=dot&graph=';
  const graph = `
    digraph G {
      node [shape=plaintext];
      a [label=<
        <TABLE BORDER="1" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" STYLE="font-family: 'Arial', sans-serif; border: 1px solid black;">
          <TR><TD COLSPAN="2" ALIGN="CENTER" BGCOLOR="#FFCC00" STYLE="font-size: 16px; font-weight: bold;">T·ªïng s·ªë ti·ªÅn c·ªßa t·ª´ng th√†nh vi√™n t·ª´ t·∫•t c·∫£ c√°c nh√≥m ${dateStr}</TD></TR>
          ${content}
        </TABLE>
      >];
    }
  `;
  const imageUrl = `${url}${encodeURIComponent(graph)}`;
  return imageUrl;
}

bot.onText(/\/anhbangcong/, async (msg) => {
  const chatId = msg.chat.id;
  await generateAndSendImages(chatId);
});


// Thay th·∫ø YOUR_API_KEY b·∫±ng API key OpenWeatherMap c·ªßa b·∫°n
const apiKey = '679360c3eef6d2165d3833d29b5eccf4';

// ChatId c·ªßa nh√≥m b·∫°n mu·ªën g·ª≠i d·ª± b√°o th·ªùi ti·∫øt
const chatId = -1002103270166;

// B·∫£ng d·ªãch c√°c tr·∫°ng th√°i th·ªùi ti·∫øt t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát
const weatherDescriptions = {
  'clear sky': 'ng√†y n·∫Øng n√≥ng, c√≥ n∆°i n·∫Øng n√≥ng gay g·∫Øt üå§Ô∏è',
  'few clouds': 'ng√†y n·∫Øng n√≥ng üå§Ô∏è',
  'scattered clouds': 'C√≥ m√¢y, tr∆∞a chi·ªÅu tr·ªùi h·ª≠ng n·∫Øng ‚òÅ',
  'broken clouds': 'C√≥ m√¢y, tr∆∞a chi·ªÅu tr·ªùi h·ª≠ng n·∫Øng ‚òÅ',
  'overcast clouds': 'Nhi·ªÅu m√¢y ‚òÅ',
  'shower rain': 'ng√†y m∆∞a r√†o v√† r·∫£i r√°c c√≥ gi√¥ng üå´Ô∏è',
  'rain': 'ng√†y c√≥ m∆∞a r√†o v√† c√≥ gi√¥ng v√†i n∆°i üå´Ô∏è',
  'thunderstorm': 'C·ª• b·ªô c√≥ m∆∞a to',
  'squall': 'Gi√≥ gi·∫≠t',
  'drizzle': 'm∆∞a nh·ªè',
  'light rain': 'ng√†y c√≥ l√∫c c√≥ m∆∞a r√†o v√† r·∫£i r√°c c√≥ gi√¥ng üå´Ô∏è',
  'moderate rain': 'c√≥ m∆∞a v·ª´a ƒë·∫øn m∆∞a to',
  'heavy rain': 'm∆∞a to',
  'light thunderstorm': 'gi√¥ng r·∫£i r√°c',
  'thunderstorm with heavy rain': 'm∆∞a r√†o v√† gi√¥ng v√†i n∆°i üå´Ô∏è',
  'heavy thunderstorm': 'c√≥ gi√¥ng v√†i n∆°i',
  'cold': 'tr·ªùi l·∫°nh',
  'hot': 'c√≥ n·∫Øng n√≥ng',
};

// B·∫£ng √°nh x·∫° ƒë·ªÉ tr√°nh tr√πng l·∫∑p c√¢u t·ª´
const stateMapping = {
  'ng√†y c√≥ l√∫c c√≥ m∆∞a r√†o v√† r·∫£i r√°c c√≥ gi√¥ng üå´Ô∏è': 'c√≥ m∆∞a v·ª´a, m∆∞a to v√† c√≥ n∆°i c√≥ gi√¥ng üå´Ô∏è',
  'ng√†y c√≥ m∆∞a r√†o v√† c√≥ gi√¥ng v√†i n∆°i üå´Ô∏è': 'c√≥ m∆∞a r√†o v√† gi√¥ng r·∫£i r√°c üå´Ô∏è',
  'tr·ªùi n·∫Øng': 'tr·ªùi quang ƒë√£ng',
  'C√≥ m√¢y, tr∆∞a chi·ªÅu tr·ªùi h·ª≠ng n·∫Øng ‚òÅ': 'tr·ªùi quang',
  // (Th√™m c√°c √°nh x·∫° kh√°c n·∫øu c·∫ßn)
};

// H√†m l·∫•y h∆∞·ªõng gi√≥ d·ª±a tr√™n ƒë·ªô
function getWindDirection(deg) {
  if (deg >= 337.5 || deg < 22.5) return 'B·∫Øc';
  if (deg >= 22.5 && deg < 67.5) return 'ƒê√¥ng B·∫Øc';
  if (deg >= 67.5 && deg < 112.5) return 'ƒê√¥ng';
  if (deg >= 112.5 && deg < 157.5) return 'ƒê√¥ng Nam';
  if (deg >= 157.5 && deg < 202.5) return 'Nam';
  if (deg >= 202.5 && deg < 247.5) return 'T√¢y Nam';
  if (deg >= 247.5 && deg < 292.5) return 'T√¢y';
  if (deg >= 292.5 && deg < 337.5) return 'T√¢y B·∫Øc';
}

// H√†m l·∫•y c·∫•p gi√≥ d·ª±a tr√™n t·ªëc ƒë·ªô gi√≥
function getWindSpeedLevel(windSpeed) {
  if (windSpeed < 2) return 1;
  if (windSpeed >= 2 && windSpeed < 5) return 2;
  if (windSpeed >= 5 && windSpeed < 10) return 3;
  if (windSpeed >= 10 && windSpeed < 17) return 4;
  if (windSpeed >= 17 && windSpeed < 25) return 5;
  if (windSpeed >= 25 && windSpeed < 33) return 6;
  if (windSpeed >= 33 && windSpeed < 42) return 7;
  if (windSpeed >= 42 && windSpeed < 52) return 8;
  if (windSpeed >= 52 && windSpeed < 63) return 9;
  if (windSpeed >= 63) return 10;
}

// H√†m l·∫•y tr·∫°ng th√°i th·ªùi ti·∫øt ph·ªï bi·∫øn nh·∫•t
function getMostCommonWeatherDescription(descriptions) {
  const count = descriptions.reduce((acc, desc) => {
    if (!acc[desc]) {
      acc[desc] = 1;
    } else {
      acc[desc] += 1;
    }
    return acc;
  }, {});

  let mostCommon = '';
  let maxCount = 0;

  for (const desc in count) {
    if (count[desc] > maxCount) {
      mostCommon = desc;
      maxCount = count[desc];
    }
  }

  return mostCommon;
}

// H√†m ƒë·ªãnh d·∫°ng ng√†y theo chu·∫©n "ng√†y/th√°ng/nƒÉm"
function formatDate(date) {
  const formatter = new Intl.DateTimeFormat('vi-VN', {
    day: 'numeric',
    month: 'numeric',
    year: 'numeric'
  });
  return formatter.format(date);
}

// H√†m ch·ªçn ·∫£nh GIF d·ª±a tr√™n tr·∫°ng th√°i th·ªùi ti·∫øt
function selectWeatherGif(morningDescription, eveningDescription) {
  const rainKeywords = ['ng√†y c√≥ l√∫c c√≥ m∆∞a r√†o v√† r·∫£i r√°c c√≥ gi√¥ng üå´Ô∏è', 'ng√†y c√≥ m∆∞a r√†o v√† c√≥ gi√¥ng v√†i n∆°i üå´Ô∏è', 'c√≥ m∆∞a r√†o v√† gi√¥ng r·∫£i r√°c üå´Ô∏è', 'c√≥ m∆∞a v·ª´a ƒë·∫øn m∆∞a to' ];
  const cloudKeywords = ['C√≥ m√¢y ‚òÅÔ∏è', 'Nhi·ªÅu m√¢y ‚òÅ', 'Nhi·ªÅu m√¢y ‚òÅ'];
  const sunKeywords = ['ng√†y n·∫Øng n√≥ng üå§Ô∏è', 'ng√†y n·∫Øng n√≥ng, c√≥ n∆°i n·∫Øng n√≥ng gay g·∫Øt üå§Ô∏è', 'C√≥ m√¢y, tr∆∞a chi·ªÅu tr·ªùi h·ª≠ng n·∫Øng ‚òÅ'];
  

  // N·∫øu bu·ªïi s√°ng ho·∫∑c bu·ªïi chi·ªÅu t·ªëi c√≥ m∆∞a r√†o, gi√¥ng v√† c√≥ m√¢y
  if ((rainKeywords.some(k => morningDescription.includes(k)) && sunKeywords.some(k => morningDescription.includes(k))) || 
      (rainKeywords.some(k => eveningDescription.includes(k)) && sunKeywords.some(k => eveningDescription.includes(k)))) {
    return 'https://iili.io/JrXfzI1.gif'; // GIF cho m∆∞a v√† m√¢y
  }

  // N·∫øu bu·ªïi s√°ng ho·∫∑c bu·ªïi chi·ªÅu t·ªëi c√≥ n·∫Øng ho·∫∑c n·∫Øng n√≥ng
  if (sunKeywords.some(k => morningDescription.includes(k)) || sunKeywords.some(k => eveningDescription.includes(k))) {
    return 'https://iili.io/JrXLVxS.gif'; // GIF cho tr·ªùi n·∫Øng
  }

  // N·∫øu kh√¥ng c√≥ m∆∞a r√†o v√† gi√¥ng
  if (!rainKeywords.some(k => morningDescription.includes(k)) && !rainKeywords.some(k => eveningDescription.includes(k))) {
    return 'https://iili.io/JrXLVxS.gif'; // GIF cho th·ªùi ti·∫øt kh√¥ng m∆∞a r√†o v√† gi√¥ng
  }

  return null; // Kh√¥ng c√≥ GIF
}



// H√†m l·∫•y d·ª± b√°o th·ªùi ti·∫øt chi ti·∫øt cho H√† N·ªôi
function getDailyWeatherForecast() {
  const url = `https://api.openweathermap.org/data/2.5/forecast?q=Hanoi,Vietnam&appid=${apiKey}&units=metric`;

  request(url, (error, response, body) => {
    if (error) {
      console.error('L·ªói khi k·∫øt n·ªëi t·ªõi OpenWeatherMap:', error);
      return;
    }

    const data = JSON.parse(body);
    const forecasts = data.list;

    // L·∫•y ng√†y hi·ªán t·∫°i t·ª´ timestamp v√† ƒë·ªãnh d·∫°ng th√†nh "ng√†y/th√°ng/nƒÉm"
    const currentDate = formatDate(new Date(forecasts[0].dt * 1000));

    // T√¨m nhi·ªát ƒë·ªô th·∫•p nh·∫•t v√† cao nh·∫•t trong ng√†y
    const minTemp = Math.min(...forecasts.map(f => f.main.temp_min));
    const maxTemp = Math.max(...forecasts.map(f => f.main.temp_max));

    // Bu·ªïi s√°ng ch·ªâ hi·ªÉn th·ªã t·ªïng 2 tr·∫°ng th√°i
    const morningForecasts = forecasts.slice(0, 4); // D·ª± b√°o bu·ªïi s√°ng
    
    // Tr·∫°ng th√°i m√¢y duy nh·∫•t
    const cloudTypes = ['C√≥ m√¢y ‚òÅÔ∏è', 'Nhi·ªÅu m√¢y ‚òÅ', 'Nhi·ªÅu m√¢y ‚òÅ'];
    const uniqueCloudDescription = morningForecasts
      .map(f => weatherDescriptions[f.weather[0].description] || f.weather[0].description)
      .find(desc => cloudTypes.includes(desc));

    // Tr·∫°ng th√°i kh√°c
    const otherDescriptions = morningForecasts
      .map(f => weatherDescriptions[f.weather[0].description] || f.weather[0].description)
      .filter(desc => !cloudTypes.includes(desc));

    // Ch·ªçn 1 tr·∫°ng th√°i kh√¥ng ph·∫£i m√¢y
    const nonCloudDescription = otherDescriptions[0];

    // T·ªïng h·ª£p tr·∫°ng th√°i bu·ªïi s√°ng
    const morningDescriptions = [uniqueCloudDescription, nonCloudDescription].filter(Boolean).join(", ");

    // L·∫•y m√¥ t·∫£ duy nh·∫•t bu·ªïi chi·ªÅu t·ªëi ƒë·∫øn ƒë√™m
    const eveningForecasts = forecasts.slice(4, 8);
    const eveningDescriptions = eveningForecasts.map(
      f => weatherDescriptions[f.weather[0].description] || f.weather[0].description
    );

    let mostCommonEveningDescription = getMostCommonWeatherDescription(eveningDescriptions);

    // N·∫øu tr·∫°ng th√°i bu·ªïi chi·ªÅu t·ªëi ƒë·∫øn ƒë√™m tr√πng v·ªõi bu·ªïi s√°ng, thay ƒë·ªïi n·ªôi dung
    if (morningDescriptions.includes(mostCommonEveningDescription)) {
      mostCommonEveningDescription = stateMapping[mostCommonEveningDescription] || mostCommonEveningDescription;
    }
    // Ki·ªÉm tra c√≥ m∆∞a r√†o, m∆∞a gi√¥ng, m∆∞a l·ªõn kh√¥ng
    const hasRainyWeather = [...morningForecasts, ...eveningForecasts].some(f =>
      ['ng√†y c√≥ l√∫c c√≥ m∆∞a r√†o v√† r·∫£i r√°c c√≥ gi√¥ng üå´Ô∏è', 'ng√†y c√≥ m∆∞a r√†o v√† c√≥ gi√¥ng v√†i n∆°i üå´Ô∏è', 'c√≥ m∆∞a r√†o v√† gi√¥ng r·∫£i r√°c üå´Ô∏è'].includes(weatherDescriptions[f.weather[0].description] || f.weather[0].description)
    );

    // T√¨m t·ªëc ƒë·ªô gi√≥ cao nh·∫•t v√† th·∫•p nh·∫•t trong ng√†y
    const minWindSpeed = Math.min(...forecasts.map(f => f.wind.speed));
    const maxWindSpeed = Math.max(...forecasts.map(f => f.wind.speed));

    const wind_direction = getWindDirection(forecasts[forecasts.length - 1].wind.deg);

    

    let forecastMessage = `D·ª± b√°o th·ªùi ti·∫øt ng√†y ${currentDate}, khu v·ª±c H√† N·ªôi:\n`;

    

    
    forecastMessage += `\n ${morningDescriptions},`;
    forecastMessage += ` chi·ªÅu t·ªëi v√† ƒë√™m ${mostCommonEveningDescription}.`;
    forecastMessage += ` Gi√≥ ${wind_direction} c·∫•p ${getWindSpeedLevel(minWindSpeed)}-${getWindSpeedLevel(maxWindSpeed)}.`;

    // N·∫øu c√≥ c√°c tr·∫°ng th√°i m∆∞a r√†o, gi√¥ng b√£o, m∆∞a l·ªõn, th√™m c·∫£nh b√°o
    if (hasRainyWeather) {
      forecastMessage += ` ‚õàÔ∏è Trong m∆∞a gi√¥ng c√≥ kh·∫£ nƒÉng x·∫£y ra l·ªëc, s√©t, m∆∞a ƒë√° v√† gi√≥ gi·∫≠t m·∫°nh.`;
    }
    forecastMessage += ` Nhi·ªát ƒë·ªô t·ª´ ${Math.round(minTemp)}¬∞C ƒë·∫øn ${Math.round(maxTemp)}¬∞Cüå°Ô∏è. Th·ªùi ti·∫øt nh∆∞ n√†y kh√¥ng qu·∫©y th√¨ h∆°i ph√≠!`;

    // Ch·ªçn ·∫£nh GIF ph√π h·ª£p
    const selectedGif = selectWeatherGif(morningDescriptions, mostCommonEveningDescription);

    // N·∫øu c√≥ ·∫£nh GIF, g·ª≠i ·∫£nh GIF thay v√¨ hi·ªÉn th·ªã URL
    if (selectedGif) {
      bot.sendAnimation(chatId, selectedGif, { caption: forecastMessage });
    } else {
      bot.sendMessage(chatId, forecastMessage);
    }
  });
}
// Thi·∫øt l·∫≠p cron ƒë·ªÉ g·ªçi h√†m v√†o 7 gi·ªù s√°ng theo m√∫i gi·ªù Vi·ªát Nam
cron.schedule('0 6 * * *', getDailyWeatherForecast, {
  timezone: "Asia/Ho_Chi_Minh", // ƒê·∫∑t m√∫i gi·ªù cho Vi·ªát Nam
});

// Thi·∫øt l·∫≠p c√°c cron jobs
resetDailyGiftStatus(DailyGiftStatus); // Truy·ªÅn m√¥ h√¨nh DailyGiftStatus
sendMorningMessage(bot);

// X·ª≠ l√Ω callback t·ª´ Telegram
bot.on('callback_query', async (callbackQuery) => {
  await handleGiftClaim(bot, callbackQuery, BangCong2, DailyGiftStatus); // Truy·ªÅn m√¥ h√¨nh DailyGiftStatus
});

//news.js
// ChatId c·ªßa nh√≥m
const groupChatId = -1002103270166; // Thay b·∫±ng ChatId c·ªßa nh√≥m b·∫°n

// Thi·∫øt l·∫≠p l·ªãch tr√¨nh g·ª≠i tin nh·∫Øn v√†o nh√≥m
setupNewsSchedule(bot, groupChatId);

//warningMember.js
bot.on('message', (msg) => {
  handleMessage(bot, msg, groupNames);
});

cron.schedule('50 6 * * *', async () => {
  await resetKeywords();
}, {
  timezone: "Asia/Ho_Chi_Minh"
});

bot.onText(/\/reset/, async (msg) => {
  await resetKeywords();
  bot.sendMessage(msg.chat.id, "ƒê√£ reset tr∆∞·ªùng keyword c·ªßa t·∫•t c·∫£ c√°c tin nh·∫Øn.");
});








//forum.js
// L·ªãch tr√¨nh ƒë·ªÉ x√≥a h·∫øt d·ªØ li·ªáu t·ª´ schema v√†o 0h00 h√†ng ng√†y
cron.schedule('0 0 * * *', async () => {
  try {
    // X√≥a h·∫øt d·ªØ li·ªáu t·ª´ schema
    await Message.deleteMany({});
    console.log('ƒê√£ x√≥a h·∫øt d·ªØ li·ªáu t·ª´ schema Message.');
  } catch (error) {
    console.error('L·ªói khi x√≥a d·ªØ li·ªáu t·ª´ schema Message:', error);
  }
});

// H√†m l·∫•y emoji rank d·ª±a theo level
function getRankEmoji(level) {
  if (level >= 1 && level <= 2) return 'ü•ö';
  if (level >= 3 && level < 5) return 'üê£';
  if (level >= 5 && level < 7) return 'üê•';
  if (level >= 8 && level <= 9) return 'üê¶';
  if (level >= 10 && level <= 11) return 'ü¶ú';
  if (level >= 12 && level <= 13) return 'ü¶Ñ';
  if (level >= 14 && level <= 15) return 'üñ§‚Éùü§ç';
  if (level >= 16 && level <= 18) return 'ü§∞üèª';
  if (level >= 19 && level <= 20) return 'üë∂üèª';
  if (level >= 21 && level <= 23) return 'üßõüèª';
  if (level >= 24 && level <= 26) return 'ü•∑';
  if (level >= 27 && level <= 29) return 'üßô‚Äç‚ôÇÔ∏è';
  if (level >= 30 && level <= 33) return 'üíÄ';
  if (level >= 34 && level <= 37) return 'üïØü™¶üïØ';
  if (level >= 38 && level <= 41) return 'üßü‚Äç‚ôÄÔ∏èü¶á';
  if (level >= 42 && level <= 46) return 'üëπ';
  if (level >= 47 && level <= 52) return 'ÀöÀñìç¢÷¥÷¥‡ªãüåäü¶àÀöÀñìç¢÷¥‚úßÀö';
  if (level >= 53 && level <= 55) return 'üí†VIPüí†';
  if (level >= 56 && level <= 59) return 'üíéVIPüíé';
  if (level >= 60 && level <= 64) return 'ü™©VIPü™©';
  if (level >= 65 && level <= 67) return 'ü©ªVIPü©ª';
  if (level >= 68 && level <= 70) return 'ü™¨VIPü™¨‡≠ß‚ç§‚Éùüíê';
  if (level >= 71 & level <= 73) return 'ü•âCHI·∫æN TH·∫¶N‚öîÔ∏èüõ°';
  if (level >= 74 & level <= 76) return 'ü•à√Å TH·∫¶Nüêâ‚öúÔ∏è';
  if (level >= 77 & level <= 79) return 'ü™ôV√î ƒê·ªäCHüê≤üë∏';
  if (level >= 80) return 'üëë HUY·ªÄN THO·∫†Iü¶ã‚Éüü•Ä‚Ñ¢Ô∏è';

  if (level >= 100) return 'ÔÆ©Ÿ®ŸÄÔÆ©ÔÆ©Ÿ®ŸÄü´ÄÔÆ©Ÿ®ŸÄÔÆ©ÔÆ©Ÿ®ŸÄüîë';
  return '';
}

// H√†m l·∫•y emoji sao d·ª±a theo ph·∫ßn trƒÉm level
function getStarEmoji(levelPercent) {
  if (levelPercent < 25) return '‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ';
  if (levelPercent < 50) return '‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ';
  if (levelPercent < 75) return '‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ';
  if (levelPercent < 90) return '‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ';
  if (levelPercent < 100) return '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ';
  if (levelPercent >= 100) return '‚ú™‚ú™‚ú™‚ú™‚ú™';
  return '';
}

const replyKeyboard4 = {
  reply_markup: {
    keyboard: [
      [{ text: 'Xem t√†i kho·∫£n üßæ' }, { text: 'Nhi·ªám v·ª• h√†ng ng√†y ü™Ç' }],
      [{ text: 'T√∫i ƒë·ªì üéí' }, { text: 'Nhi·ªám v·ª• nguy·ªát tr∆∞·ªùng k·ª≥ üìú' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

bot.onText(/\/update/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const members = await Member.find({});
    if (!members.length) {
      bot.sendMessage(chatId, 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†o.');
      return;
    }

    for (let member of members) {
      bot.sendMessage(member.userId, 'ƒê√£ C·∫≠p nh·∫≠t phi√™n b·∫£n m·ªõi h√£y c·∫≠p nh·∫≠t th√¥ng tin c·ªßa b·∫°n:', replyKeyboard4);
    }

    bot.sendMessage(chatId, 'ƒê√£ g·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t cho t·∫•t c·∫£ th√†nh vi√™n.');
  } catch (error) {
    console.error('L·ªói khi g·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi g·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t.');
  }
});




// L·ªánh /start ƒë·ªÉ tham gia bot
bot.onText(/\/start/, async (msg) => {
  const userId = msg.from.id;
  const fullname = `${msg.from.first_name} ${msg.from.last_name || ''}`.trim();
  const opts = {
    reply_markup: {
    keyboard: [
      [{ text: 'Xem t√†i kho·∫£n üßæ' }, { text: 'Nhi·ªám v·ª• h√†ng ng√†y ü™Ç' }],
      [{ text: 'T√∫i ƒë·ªì üéí' }, { text: 'Nhi·ªám v·ª• nguy·ªát tr∆∞·ªùng k·ª≥ üìú' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};
      

  try {
    // Ki·ªÉm tra xem th√†nh vi√™n ƒë√£ t·ªìn t·∫°i ch∆∞a
    let member = await Member.findOne({ userId });

    if (!member) {
      // T·∫°o m·ªõi th√†nh vi√™n n·∫øu ch∆∞a t·ªìn t·∫°i
      member = new Member({
        userId,
        fullname,
        level: 1,
        levelPercent: 0,
        assets: {
          quay: 0,
          keo: 0,
          vnd: 0
        }
      });

      await member.save();
      bot.sendMessage(msg.chat.id, `Ch√†o m·ª´ng ${fullname} ƒë√£ tham gia bot!`, opts);
     
    } else {
      bot.sendMessage(msg.chat.id, `${fullname}, b·∫°n ƒë√£ tham gia bot tr∆∞·ªõc ƒë√≥.`, opts);
    }
  } catch (error) {
    console.error('L·ªói khi th√™m th√†nh vi√™n:', error);
    bot.sendMessage(msg.chat.id, 'ƒê√£ x·∫£y ra l·ªói khi th√™m b·∫°n v√†o h·ªá th·ªëng.');
  }
});       

// H√†m ki·ªÉm tra v√† r·ªùi kh·ªèi c√°c nh√≥m kh√¥ng ƒë∆∞·ª£c ph√©p
async function leaveUnauthorizedGroups() {
  try {
    const updates = await bot.getUpdates();
    const groups = new Set();

    // Thu th·∫≠p t·∫•t c·∫£ c√°c group chat id t·ª´ c√°c c·∫≠p nh·∫≠t
    updates.forEach(update => {
      if (update.message && update.message.chat && update.message.chat.type === 'supergroup') {
        groups.add(update.message.chat.id);
      }
    });

    // Ki·ªÉm tra v√† r·ªùi kh·ªèi c√°c nh√≥m kh√¥ng ƒë∆∞·ª£c ph√©p
    for (const chatId of groups) {
      if (!kickbot.hasOwnProperty(chatId.toString())) {
        console.log(`Leaving unauthorized group: ${chatId}`);
        try {
          await bot.sendMessage(chatId, "Cha m·∫π ƒë·ª©a n√†o add tao v√†o nh√≥m ƒë√¢y xin ph√©p anh Hieu G√† ch∆∞a @duchieu287");
          await bot.leaveChat(chatId);
        } catch (error) {
          console.error(`Failed to leave unauthorized group ${chatId}:`, error);
        }
      }
    }
  } catch (error) {
    console.error('Failed to fetch updates:', error);
  }
}
// G·ªçi h√†m r·ªùi kh·ªèi c√°c nh√≥m kh√¥ng ƒë∆∞·ª£c ph√©p khi kh·ªüi ƒë·ªông bot
leaveUnauthorizedGroups();

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const messageContent = msg.text || msg.caption;

 // Ki·ªÉm tra n·∫øu tin nh·∫Øn ƒë·∫øn t·ª´ nh√≥m kh√¥ng ƒë∆∞·ª£c ph√©p
  if (chatId < 0 && !kickbot.hasOwnProperty(chatId.toString())) {
    console.log(`Unauthorized group detected: ${chatId}`);
    try {
      // G·ª≠i tin nh·∫Øn c·∫£nh b√°o v√†o nh√≥m
      await bot.sendMessage(chatId, "Cha m·∫π ƒë·ª©a n√†o add tao v√†o nh√≥m ƒë·∫•y xin ph√©p anh Hieu G√† ch∆∞a @duchieu287");
    } catch (error) {
      console.error(`Failed to send warning message to ${chatId}:`, error);
    }
    
    // R·ªùi kh·ªèi nh√≥m kh√¥ng ƒë∆∞·ª£c ph√©p
    try {
      await bot.leaveChat(chatId);
    } catch (error) {
      console.error(`Failed to leave chat ${chatId}:`, error);
    }
    return;
  }
  
  // B·ªè qua l·ªánh bot v√† tin nh·∫Øn b·∫Øt ƒë·∫ßu b·∫±ng "ch∆∞a c√≥"
  if (msg.text && (msg.text.startsWith('/') || msg.text.startsWith('ch∆∞a c√≥'))) return;

  // T√¨m ho·∫∑c t·∫°o m·ªõi th√†nh vi√™n
  let member = await Member.findOne({ userId });
  if (!member) {
    member = new Member({
      userId,
      fullname: msg.from.first_name,
      hasInteracted: chatId > 0 // Mark as interacted if from private chat
    });
    await member.save();
  } else if (chatId > 0) {
    // ƒê√°nh d·∫•u ng∆∞·ªùi d√πng ƒë√£ t∆∞∆°ng t√°c v·ªõi bot trong cu·ªôc tr√≤ chuy·ªán ri√™ng t∆∞
    await Member.updateOne({ userId }, { $set: { hasInteracted: true } });
  }

  // N·∫øu tin nh·∫Øn t·ª´ cu·ªôc tr√≤ chuy·ªán ri√™ng t∆∞
  if (chatId > 0) {
    const fullname = member.fullname;
    const level = member.level;
    const levelPercent = member.levelPercent;
    const rankEmoji = getRankEmoji(level);
    const starEmoji = getStarEmoji(levelPercent);

    const captionText = msg.caption || 'h√¨nh ·∫£nh';
    const responseMessage = `Qu·∫©y th·ªß: <a href="tg://user?id=${userId}">${fullname}</a> ${rankEmoji} (Level: ${level}):
    ${starEmoji}
    
    L·ªùi nh·∫Øn: ${msg.text || captionText}`;

    // ƒê·ªãnh nghƒ©a t√πy ch·ªçn ph·∫£n h·ªìi
    const replyOpts = {
      reply_markup: {
        keyboard: [
          [{ text: 'Xem t√†i kho·∫£n üßæ' }, { text: 'Nhi·ªám v·ª• h√†ng ng√†y ü™Ç' }],
          [{ text: 'T√∫i ƒë·ªì üéí' }, { text: 'Nhi·ªám v·ª• nguy·ªát tr∆∞·ªùng k·ª≥ üìú' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      },
      parse_mode: 'HTML'
    };

    // G·ª≠i th√¥ng ƒëi·ªáp ph·∫£n h·ªìi ƒë·∫øn ng∆∞·ªùi g·ª≠i
    try {
      await bot.sendMessage(chatId, responseMessage, replyOpts);
    } catch (error) {
      console.error(`Failed to send message to ${chatId}:`, error);
    }
    if (messageContent) {
      // Forward the message to all other members in private chats
      await sendMessageToAllMembers(responseMessage, userId);
    }
  } else {
    
   }
});

// Function to send messages to all members who have interacted
async function sendMessageToAllMembers(messageText, senderUserId) {
  try {
    const members = await Member.find({ hasInteracted: true });
    members.forEach(async (member) => {
      if (member.userId !== senderUserId) {
        try {
          await bot.sendMessage(member.userId, messageText, { parse_mode: 'HTML' });
        } catch (error) {
          if (error.response && error.response.statusCode === 403) {
            console.error(`Error sending message to ${member.userId}: Bot can't initiate conversation`);
          } else {
            console.error(`Error sending message to ${member.userId}:`, error);
          }
        }
      }
    });
  } catch (error) {
    console.error("Error sending message to all members:", error);
  }
}

const groupNames2 = {
  "-1002039100507": "C·ªòNG ƒê·ªíNG N·∫ÆM B·∫ÆT C∆† H·ªòI",
  "-1002004082575": "H·ªôi Nh√≥m",
  "-1002123430691": "D·∫™N L·ªêI TH√ÄNH C√îNG",
  "-1002143712364": "C√ôNG NHAU CHIA S·∫∫",
  "-1002128975957": "H∆Ø·ªöNG T·ªöI T∆Ø∆†NG LAI",
  "-1002080535296": "TRAO ƒê·ªîI C√îNG VI·ªÜC 2",
  "-1002091101362": "TRAO ƒê·ªîI C√îNG VI·ªÜC 1", 
  "-1002129896837": "GROUP I M·∫†NH ƒê·ª®C CHIA S·∫∫", 
  "-1002228252389": "B∆Ø·ªöC ƒêI KH·ªûI NGHI·ªÜP", 
  "-1002108234982": "Community free, be truly rich",
  "-1002128289933": "test", 
  "-4201367303": "L√ÄM GI√ÄU C√ôNG NHAU"

};

// H√†m reset previousKeo v√† previousQuay
const resetPreviousValues = async () => {
  try {
    const members = await Member.find();
    for (let member of members) {
      member.previousKeo = 0;
      member.previousQuay = 0;
      await member.save();
    }
    console.log('Reset previousKeo v√† previousQuay th√†nh c√¥ng.');
  } catch (error) {
    console.error('L·ªói khi reset previousKeo v√† previousQuay:', error);
  }
};
// L√™n l·ªãch ch·∫°y h√†ng ng√†y v√†o 0h00
cron.schedule('58 19 * * *', resetPreviousValues);


const updateLevelPercent = async (userId) => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const endOfToday = new Date(today);
  endOfToday.setHours(23, 59, 59, 999);

  try {
    let member = await Member.findOne({ userId });

    if (!member) {
      console.error(`Kh√¥ng t√¨m th·∫•y th√†nh vi√™n v·ªõi userId: ${userId}`);
      return;
    }

    const bangCongRecords = await BangCong2.find({
      userId: userId,
      date: { $gte: today, $lt: endOfToday },
      groupId: { $in: Object.keys(groupNames2) }
    });
    const totalQuay = bangCongRecords.reduce((acc, record) => acc + (record.quay || 0), 0);
    const totalKeo = bangCongRecords.reduce((acc, record) => acc + (record.keo || 0), 0);

    const previousQuay = member.previousQuay || 0;
    const previousKeo = member.previousKeo || 0;

    if (totalQuay > previousQuay || totalKeo > previousKeo) {
      
      let levelPercentIncrease = 0;
      levelPercentIncrease += (totalQuay - previousQuay) * 0.5;
      levelPercentIncrease += (totalKeo - previousKeo) * 1.4;

      member.levelPercent = (member.levelPercent || 0) + levelPercentIncrease;

      let levelIncreased = false;
      while (member.levelPercent >= 100) {
        member.level += 1;
        member.levelPercent -= 100; // Ch·ªâ tr·ª´ ƒëi 100, gi·ªØ l·∫°i ph·∫ßn d∆∞
        levelIncreased = true;
      }

      member.previousQuay = totalQuay;
      member.previousKeo = totalKeo;

      await member.save();

      if (levelIncreased && member.level % 5 === 0) {
        await issueLevelUpVipCard(userId, member.level);
      }
    }
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t levelPercent:', error);
  }
};

const issueLevelUpVipCard = async (userId, level) => {
  const member = await Member.findOne({ userId });
  if (!member) return;

  // T√≠nh s·ªë ng√†y s·ª≠ d·ª•ng d·ª±a tr√™n level
  let daysValid = (level % 20) / 5;
  if (daysValid === 0) {
    daysValid = 4; // N·∫øu level l√† b·ªôi s·ªë c·ªßa 20, th·∫ª c√≥ th·ªùi h·∫°n 4 ng√†y
  }
  
  const now = new Date();
  const validFrom = new Date(now.setDate(now.getDate() + 1)); // Hi·ªáu l·ª±c t·ª´ ng√†y mai
  validFrom.setHours(0, 0, 0, 0); // B·∫Øt ƒë·∫ßu t·ª´ 00:00:00 ng√†y mai
  const validUntil = new Date(validFrom);
  validUntil.setDate(validFrom.getDate() + daysValid); // Hi·ªáu l·ª±c trong 1 ng√†y
  validUntil.setHours(1, 0, 0, 0); // K·∫øt th√∫c v√†o 23:59:59 ng√†y sau ƒë√≥

  const vipCard = new VipCard({
    userId,
    type: 'level_up',
    validFrom,
    validUntil,
    expBonus: 0, // Kh√¥ng tƒÉng exp
    keoBonus: 100,
    quayBonus: 100, // T√≠nh 600ƒë/qu·∫©y
    keoLimit: 3,
    quayLimit: 3
  });
  await vipCard.save();

  
  const formattedValidFrom = `${validFrom.getDate()}/${validFrom.getMonth() + 1}/${validFrom.getFullYear()}`;
  const message = `Ch√∫c m·ª´ng qu·∫©y th·ªß ${member.fullname} ƒë√£ ƒë·∫°t level ${level} üåü v√† nh·∫≠n ƒë∆∞·ª£c 1 th·∫ª VIP Bonus üé´ c√≥ hi·ªáu l·ª±c t·ª´ ng√†y ${formattedValidFrom}, h·∫°n s·ª≠ d·ª•ng ${daysValid} ng√†y. 
  
  ∆Øu ƒë√£i: M√£ tƒÉng 15% 100ƒë/qu·∫©y ü•Øü•®, 15% 100ƒë/k·∫πo üç¨(tƒÉng t·ªëi ƒëa 600vnƒë/l·∫ßn n·ªôp. √Åp d·ª•ng cho s·∫£n ph·∫©m Qu·∫©y, K·∫πo v√† m·ªôt s·ªë th√†nh vi√™n tham gia nhi·ªám v·ª• nh·∫•t ƒë·ªãnh)`;
  const gifUrl = 'https://iili.io/JQSRkrv.gif'; // Thay th·∫ø b·∫±ng URL c·ªßa ·∫£nh GIF. 
    // Retrieve all members
  const members = await Member.find({});
  for (const member of members) {
    // Send message to each member's chat ID
    bot.sendAnimation(member.userId, gifUrl, { caption: message });
  }

  // Send message to the specific group ID
  const groupId = -1002103270166;
  bot.sendAnimation(groupId, gifUrl, { caption: message });
};
  
const issueWeeklyVipCard = async (userId) => {
  const member = await Member.findOne({ userId });
  const now = new Date();
  const randomDay = new Date(now);
  randomDay.setDate(now.getDate() + Math.floor(Math.random() * 7));

  const validFrom = new Date(randomDay);
  validFrom.setHours(0, 0, 0, 0);
  const validUntil = new Date(validFrom);
  validUntil.setDate(validFrom.getDate() + 1);
  validUntil.setHours(1, 0, 0, 0);

  const expBonus = 220 + Math.floor(Math.random() * 101); // Random t·ª´ 220 ƒë·∫øn 320

  const vipCard = new VipCard({
    userId,
    type: 'week',
    validFrom,
    validUntil,
    expBonus,
    keoBonus: 100,
    quayBonus: 100, // T√≠nh 600ƒë/qu·∫©y
    keoLimit: 2,
    quayLimit: 2
  });

  await vipCard.save();

  const message = `Ch√∫c m·ª´ng ${member.fullname} ƒë√£ nh·∫≠n ƒë∆∞·ª£c th·∫ª VIP tu·∫ßn üé´! C√≥ hi·ªáu l·ª±c t·ª´ ng√†y ${validFrom.toLocaleDateString()} ƒë·∫øn ${validUntil.toLocaleDateString()}.

  ∆Øu ƒë√£i: Nh·∫≠n ƒë∆∞·ª£c ${expBonus} exp, 2 M√£ tƒÉng 15% 100ƒë/qu·∫©y, 15% 100ƒë/c·ªông (tƒÉng t·ªëi ƒëa 400vnƒë/m·ªói l·∫ßn n·ªôp. √Åp d·ª•ng cho s·∫£n ph·∫©m Qu·∫©y, C·ªông v√† m·ªôt s·ªë th√†nh vi√™n tham gia nhi·ªám v·ª• nh·∫•t ƒë·ªãnh)`;
  const gifUrl = 'https://iili.io/JQSRkrv.gif'; // Thay th·∫ø b·∫±ng URL c·ªßa ·∫£nh GIF. 
   
  const members = await Member.find({});
  for (const member of members) {
    // Send message to each member's chat ID
    bot.sendAnimation(member.userId, gifUrl, { caption: message });
  }

  // Send message to the specific group ID
  const groupId = -1002103270166;
  bot.sendAnimation(groupId, gifUrl, { caption: message });
};

const issueMonthlyVipCard = async (userId) => {
  const now = new Date();
  const randomDay = new Date(now);
  randomDay.setDate(now.getDate() - Math.floor(Math.random() * 7));

  const validFrom = new Date(randomDay);
  validFrom.setHours(0, 0, 0, 0);
  const validUntil = new Date(validFrom);
  validUntil.setDate(validFrom.getDate() + 2);
  validUntil.setHours(1, 0, 0, 0);

  const expBonus = 720 + Math.floor(Math.random() * 101); // Random t·ª´ 720 ƒë·∫øn 820

  const vipCard = new VipCard({
    userId,
    type: 'month',
    validFrom,
    validUntil,
    expBonus,
    keoBonus: 100,
    quayBonus: 100, // T√≠nh 600ƒë/qu·∫©y
    keoLimit: 4,
    quayLimit: 3
  });

  await vipCard.save();

  const message = `üåü Ch√∫c m·ª´ng ${member.fullname} ƒë√£ nh·∫≠n ƒë∆∞·ª£c th·∫ª VIP th√°ng üí≥! C√≥ hi·ªáu l·ª±c t·ª´ ng√†y ${validFrom.toLocaleDateString()} ƒë·∫øn ${validUntil.toLocaleDateString()}.
  
  ∆Øu ƒë√£i: Nh·∫≠n ƒë∆∞·ª£c ${expBonus} exp, 2 M√£ tƒÉng 15% 100ƒë/qu·∫©y, 15% 100ƒë/c·ªông (tƒÉng t·ªëi ƒëa 600vnƒë/m·ªói l·∫ßn n·ªôp. √Åp d·ª•ng cho s·∫£n ph·∫©m Qu·∫©y, C·ªông v√† m·ªôt s·ªë th√†nh vi√™n tham gia nhi·ªám v·ª• nh·∫•t ƒë·ªãnh)`;
  
    // Retrieve all members
  const members = await Member.find({});
  const gifUrl = 'https://iili.io/JQSRkrv.gif'; // Thay th·∫ø b·∫±ng URL c·ªßa ·∫£nh GIF. 
   
  for (const member of members) {
    // Send message to each member's chat ID
    bot.sendAnimation(member.userId, gifUrl, { caption: message });
  }

  // Send message to the specific group ID
  const groupId = -1002103270166;
  bot.sendAnimation(groupId, gifUrl, { caption: message });
};

//C·∫≠p nh·∫≠t h√†m x·ª≠ l√Ω ti·∫øn ƒë·ªô nhi·ªám v·ª• tr∆∞·ªùng k·ª≥
const updateMissionProgress = async (userId) => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const endOfToday = new Date(today);
  endOfToday.setHours(23, 59, 59, 999);

  try {
    let member = await Member.findOne({ userId });

    if (!member) {
      console.error(`Kh√¥ng t√¨m th·∫•y th√†nh vi√™n v·ªõi userId: ${userId}`);
      return;
    }

    const bangCongRecords = await BangCong2.find({
      userId: userId,
      date: { $gte: today, $lt: endOfToday }
    });

    if (bangCongRecords.length > 0) {
      if (!member.lastConsecutiveUpdate || member.lastConsecutiveUpdate < today) {
        member.consecutiveDays += 1;
        member.lastConsecutiveUpdate = today;

        if (member.consecutiveDays === 7) {
          await issueWeeklyVipCard(userId);
        } else if (member.consecutiveDays === 30) {
          await issueMonthlyVipCard(userId);
        }
      }
    } else {
      member.consecutiveDays = 0;
    }

    await member.save();
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô nhi·ªám v·ª•:', error);
  }
};


const deleteMemberByFullname = async (fullname) => {
  try {
    const result = await Member.deleteOne({ fullname: fullname });
    if (result.deletedCount > 0) {
      console.log(`Th√†nh vi√™n v·ªõi fullname '${fullname}' ƒë√£ b·ªã x√≥a`);
    } else {
      console.log(`Kh√¥ng t√¨m th·∫•y th√†nh vi√™n v·ªõi fullname '${fullname}'`);
    }
  } catch (error) {
    console.error('L·ªói khi x√≥a th√†nh vi√™n:', error);
  }
};

// T·∫°o ng·∫´u nhi√™n nhi·ªám v·ª•
function generateDailyTasks() {
  const quayTask = Math.floor(Math.random() * 15) + 7; // 5-50 quay
  const keoTask = Math.floor(Math.random() * 8) + 4; // 3-20 keo
  const billTask = Math.floor(Math.random() * 1) + 1; // 1-10 nh·∫≠n ·∫£nh bill
  return {
    quayTask,
    keoTask,
    billTask
  };
}



async function checkAndUpdateBillCount(userId, text, groupId) {
  const match = text.match(/(\d+)\s*(·∫£nh|bill)/i);
  if (match) {
    let count = parseInt(match[1], 10);
    if (isNaN(count)) {
      count = 0; // Default to 0 if NaN
    }
    if (count > 0) {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const endOfToday = new Date(today);
      endOfToday.setHours(23, 59, 59, 999);

      // T√¨m ki·∫øm bangCong d·ª±a tr√™n userId, groupId v√† date
      let bangCong = await BangCong2.findOne({ userId, groupId, date: { $gte: today, $lt: endOfToday } });
      if (!bangCong) {
        // N·∫øu kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªôt b·∫£n ghi m·ªõi cho bangCong
        bangCong = new BangCong2({ userId, date: new Date(), quay: 0, keo: 0, tinh_tien: 0, nhan_anh_bill: 0, groupId: groupId });
      }

      // Check if experience was already received today
      let dailyTask = await DailyTask.findOne({ userId, date: { $gte: today, $lt: endOfToday } });
      if (!dailyTask) {
        dailyTask = new DailyTask({ userId, date: new Date(), quayTask: 0, keoTask: 0, billTask: count, completedBill: true, experienceReceived: false });
      } else {
        dailyTask.billTask = count;
        dailyTask.completedBill = true;
      }

      // Only grant experience if it hasn't been received yet
      if (!dailyTask.experienceReceived) {
        // Grant experience here (adjust the logic as needed)
        dailyTask.experienceReceived = true;
      }

      bangCong.nhan_anh_bill = count; // Set nhan_anh_bill to the current count
      await dailyTask.save();
      await bangCong.save();
    }
  }
}

// Th√¥ng tin Cloudinary
const cloudinary = {
  cloud_name: 'dvgqc5i4n',
  api_key: '743276718962993',
  api_secret: '02v-rlQstSdcpd_6IekFwQ-tdNA'
};

// H√†m ƒë·ªÉ lo·∫°i b·ªè emoji t·ª´ fullname, gi·ªØ l·∫°i c√°c k√Ω t·ª± ti·∫øng Vi·ªát c√≥ d·∫•u
function sanitizeFullname(fullname) {
  return fullname.replace(/[\u{1F600}-\u{1F64F}|\u{1F300}-\u{1F5FF}|\u{1F680}-\u{1F6FF}|\u{1F700}-\u{1F77F}|\u{1F780}-\u{1F7FF}|\u{1F800}-\u{1F8FF}|\u{1F900}-\u{1F9FF}|\u{1FA00}-\u{1FA6F}|\u{1FA70}-\u{1FAFF}|\u{2600}-\u{26FF}|\u{2700}-\u{27BF}]/gu, '').trim();
}

// H√†m ƒë·ªÉ t·∫°o URL ·∫£nh v·ªõi vƒÉn b·∫£n t√πy ch·ªânh
async function generateImageUrl(userId, fullname, level, starEmoji, totalQuayYesterday, totalKeoYesterday, totalTinhTienYesterday, totalBonusYesterday, totalQuayToday, totalKeoToday, totalTinhTienToday, totalBonusToday) {

  // L·ªçc fullname ƒë·ªÉ lo·∫°i b·ªè emoji v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
  const sanitizedFullname = sanitizeFullname(fullname);

  let member = await Member.findOne({ userId });
  
  // URL c∆° b·∫£n c·ªßa ·∫£nh
  let url = `https://res.cloudinary.com/${cloudinary.cloud_name}/image/upload/`;

  // Th√™m vƒÉn b·∫£n v√†o c√°c v·ªã tr√≠ x√°c ƒë·ªãnh t·ª´ Photoshop
  url += `l_text:arial_46_bold_italic_center:${member.level},co_rgb:FFFFFF,g_north_west,x_406,y_410/`;// Level (gi·ªØ nguy√™n)

  // Th√™m fullName v√† level (k√≠ch th∆∞·ªõc nh·ªè h∆°n so v·ªõi c√°c thay ƒë·ªïi kh√°c)
  url += `l_text:arial_65_bold_italic_center:${encodeURIComponent(sanitizedFullname)},co_rgb:FFFFFF,g_north_west,x_74,y_302/`; // Full Name

  // VƒÉn b·∫£n kh√°c (tƒÉng g·∫•p ƒë√¥i k√≠ch th∆∞·ªõc, in ƒë·∫≠m, in nghi√™ng, m√†u tr·∫Øng, font game 2D)
  url += `l_text:arial_70_bold_italic_center:${totalKeoYesterday},co_rgb:FFFFFF,g_north_west,x_300,y_940/`; // Total Keo Yesterday
  url += `l_text:arial_70_bold_italic_center:${totalBonusYesterday},co_rgb:FFFFFF,g_north_west,x_805,y_940/`; // Total Bonus Yesterday
  url += `l_text:arial_70_bold_italic_center:${totalQuayYesterday},co_rgb:FFFFFF,g_north_west,x_305,y_750/`; // Total Quay Yesterday
  url += `l_text:arial_70_bold_italic_center:${totalTinhTienYesterday},co_rgb:FFFFFF,g_north_west,x_805,y_750/`; // Total Tinh Tien Yesterday

  // Th√™m vƒÉn b·∫£n cho h√¥m nay
  url += `l_text:arial_70_bold_italic_center:${totalKeoToday},co_rgb:FFFFFF,g_north_west,x_300,y_1430/`; // Total Keo Today
  url += `l_text:arial_70_bold_italic_center:${totalBonusToday},co_rgb:FFFFFF,g_north_west,x_815,y_1430/`; // Total Bonus Today
  url += `l_text:arial_70_bold_italic_center:${totalQuayToday},co_rgb:FFFFFF,g_north_west,x_300,y_1240/`; // Total Quay Today
  url += `l_text:arial_70_bold_italic_center:${totalTinhTienToday},co_rgb:FFFFFF,g_north_west,x_815,y_1240/`; // Total Tinh Tien Today

 
  // Th√™m emoji t·ª´ h√†m starEmoji
  url += `l_text:arial_48_bold_italic_center:${encodeURIComponent(starEmoji)},co_rgb:FFFFFF,g_north_west,x_720,y_190/`; // Star Emoji
  // Th√™m ·∫£nh g·ªëc
  url += "v1717336612/kub77rwh14uuopyyykdt.jpg"; // Thay th·∫ø "sample.jpg" b·∫±ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh c·ªßa b·∫°n

  return url;
}



async function generateTaskImageUrl(userId, fullname, quayTask, keoTask, billTask, totalQuayToday, totalKeoToday, totalBillToday) {
  // L·ªçc fullname ƒë·ªÉ lo·∫°i b·ªè emoji v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
  
let dailyTask = await DailyTask.findOne({ userId, date: today });

  // URL c∆° b·∫£n c·ªßa ·∫£nh
  let url = `https://res.cloudinary.com/${cloudinary.cloud_name}/image/upload/`;


  // Nhi·ªám v·ª• h√†ng ng√†y
  url += `l_text:arial_70_bold_italic_center:${totalQuayToday}/${quayTask},co_rgb:FFFFFF,g_north_west,x_300,y_940/`; // Quay Task
  url += `l_text:arial_70_bold_italic_center:${totalKeoToday}/${keoTask},co_rgb:FFFFFF,g_north_west,x_805,y_940/`; // Keo Task
  url += `l_text:arial_70_bold_italic_center:${totalBillToday}/${billTask},co_rgb:FFFFFF,g_north_west,x_305,y_750/`; // Bill Task

  // Th√™m ·∫£nh g·ªëc
  url += "v1717336612/kub77rwh14uuopyyykdt.jpg"; // Thay th·∫ø "sample.jpg" b·∫±ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh c·ªßa b·∫°n

  return url;
}

// X·ª≠ l√Ω s·ª± ki·ªán khi n√∫t "Xem t√†i kho·∫£n" ho·∫∑c "Nhi·ªám v·ª• h√¥m nay" ƒë∆∞·ª£c nh·∫•n
bot.on('message', async (msg) => {
  const userId = msg.from.id;
  const fullname = `${msg.from.first_name} ${msg.from.last_name || ''}`.trim();
  const today = new Date();
  const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);
      
  // ƒê·∫∑t gi·ªù ph√∫t gi√¢y c·ªßa h√¥m nay v·ªÅ ƒë·∫ßu ng√†y (00:00:00)
  today.setHours(0, 0, 0, 0);
  const endOfToday = new Date(today);
  endOfToday.setHours(19, 59, 59, 999);

// ƒê·∫∑t gi·ªù ph√∫t gi√¢y c·ªßa yesterday v·ªÅ ƒë·∫ßu ng√†y (00:00:00)
    yesterday.setHours(0, 0, 0, 0);
    const endOfYesterday = new Date(yesterday);
    endOfYesterday.setHours(19, 59, 59, 999); // ƒê·∫∑t gi·ªù ph√∫t gi√¢y c·ªßa endOfYesterday v·ªÅ cu·ªëi ng√†y (23:59:59.999)

  // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng nhan_anh_bill n·∫øu tin nh·∫Øn ch·ª©a t·ª´ kh√≥a ph√π h·ª£p
  if (msg.text) {
    await checkAndUpdateBillCount(userId, msg.text);
  } else if (msg.caption) {
    await checkAndUpdateBillCount(userId, msg.caption);
  }

  if (msg.text === 'Xem t√†i kho·∫£n üßæ' || msg.text === 'Nhi·ªám v·ª• h√†ng ng√†y ü™Ç' || msg.text === 'T√∫i ƒë·ªì üéí' || msg.text === 'Nhi·ªám v·ª• nguy·ªát tr∆∞·ªùng k·ª≥ üìú') {
    try {
      // Ki·ªÉm tra xem th√†nh vi√™n ƒë√£ t·ªìn t·∫°i ch∆∞a
      let member = await Member.findOne({ userId });

      if (!member) {
        // T·∫°o m·ªõi th√†nh vi√™n n·∫øu ch∆∞a t·ªìn t·∫°i
        member = new Member({
          userId,
          fullname,
          level: 1,
          levelPercent: 0,
          assets: {
            quay: 0,
            keo: 0,
            vnd: 0
          }
        });

        await member.save();
        bot.sendMessage(msg.chat.id, `T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o m·ªõi, ${fullname}!`, {
          reply_markup: {
            keyboard: [
      [{ text: 'Xem t√†i kho·∫£n üßæ' }, { text: 'Nhi·ªám v·ª• h√†ng ng√†y ü™Ç' }],
      [{ text: 'T√∫i ƒë·ªì üéí' }, { text: 'Nhi·ªám v·ª• nguy·ªát tr∆∞·ªùng k·ª≥ üìú' }]
    ],
            resize_keyboard: true,
            one_time_keyboard: false
          }
        });
      }

      
      // L·∫•y th√¥ng tin t·ª´ BangCong2
      const bangCongRecordsYesterday = await BangCong2.find({ userId: userId, date: { $gte: yesterday, $lt: endOfYesterday } });     
      const bangCongRecordsToday = await BangCong2.find({ userId: userId, date: { $gte: today, $lt: endOfToday } });
      const totalQuayYesterday = bangCongRecordsYesterday.reduce((acc, record) => acc + (record.quay || 0), 0);
      const totalKeoYesterday = bangCongRecordsYesterday.reduce((acc, record) => acc + (record.keo || 0), 0);    
      const totalQuayToday = bangCongRecordsToday.reduce((acc, record) => acc + (record.quay || 0), 0);
      const totalKeoToday = bangCongRecordsToday.reduce((acc, record) => acc + (record.keo || 0), 0);
      const totalBillToday = bangCongRecordsToday.reduce((acc, record) => acc + (record.nhan_anh_bill || 0), 0);
      const totalTinhTienYesterday = bangCongRecordsYesterday.reduce((acc, record) => acc + (record.tinh_tien || 0), 0);
      const totalTinhTienToday = bangCongRecordsToday.reduce((acc, record) => acc + (record.tinh_tien || 0), 0);
      
      const totalBonusYesterday = totalTinhTienYesterday - ((totalKeoYesterday * 1000) + (totalQuayYesterday * 500));
      const totalBonusToday = totalTinhTienToday - ((totalKeoToday * 1000) + (totalQuayToday * 500));

      
      if (msg.text === 'Xem t√†i kho·∫£n üßæ') {
        const rankEmoji = getRankEmoji(member.level);
        const starEmoji = getStarEmoji(member.levelPercent);
        const level = `${member.level}`;
        const imageUrl = await generateImageUrl(userId, fullname, level, starEmoji, totalQuayYesterday, totalKeoYesterday, totalTinhTienYesterday, totalBonusYesterday, totalQuayToday, totalKeoToday, totalTinhTienToday, totalBonusToday);
        
const responseMessage = `
        Th√¥ng tin t√†i kho·∫£n ü©¥:
        Qu·∫©y th·ªß üëπ: ${member.fullname}
        Level: ${member.level} ${rankEmoji} + ${member.levelPercent.toFixed(2)}% 
        ${starEmoji}
        
        T√†i s·∫£n qu·∫©y ng√†y h√¥m qua üéí:
        T·ªïng Qu·∫©y: ${totalQuayYesterday} ü•®
        T·ªïng K·∫πo: ${totalKeoYesterday} üç¨
        T·ªïng t√≠nh ti·ªÅn: ${bangCongRecordsYesterday.reduce((acc, record) => acc + (record.tinh_tien || 0), 0)} VNƒê
        T·ªïng ti·ªÅn VIP bonus: ${totalBonusYesterday} VNƒê ‚ñ≤
        
        T√†i s·∫£n qu·∫©y ng√†y h√¥m nay üéí:
        T·ªïng Qu·∫©y: ${totalQuayToday} ü•®
        T·ªïng K·∫πo: ${totalKeoToday} üç¨
        T·ªïng t√≠nh ti·ªÅn: ${bangCongRecordsToday.reduce((acc, record) => acc + (record.tinh_tien || 0), 0)} VNƒê   
        T·ªïng ti·ªÅn VIP bonus: ${totalBonusToday} VNƒê ‚ñ≤

        L∆∞u √Ω ‚ö†: T·ªïng t√†i s·∫£n tr√™n l√† bao g·ªìm c·∫£ nh√≥m qu·∫©y Comunity free v√† Be truly rich n·∫øu c√≥.
      `;
       bot.sendPhoto(msg.chat.id, imageUrl, { caption: 'Th√¥ng tin t√†i kho·∫£n' });

        bot.sendMessage(msg.chat.id, responseMessage, {
          reply_markup: {
            keyboard: [
      [{ text: 'Xem t√†i kho·∫£n üßæ' }, { text: 'Nhi·ªám v·ª• h√†ng ng√†y ü™Ç' }],
      [{ text: 'T√∫i ƒë·ªì üéí' }, { text: 'Nhi·ªám v·ª• nguy·ªát tr∆∞·ªùng k·ª≥ üìú' }]
    ],
              resize_keyboard: true,
              one_time_keyboard: false
            }
          });
      } else if (msg.text === 'Nhi·ªám v·ª• h√†ng ng√†y ü™Ç') {
        // Ki·ªÉm tra xem nhi·ªám v·ª• h√†ng ng√†y ƒë√£ t·ªìn t·∫°i ch∆∞a
        let dailyTask = await DailyTask.findOne({ userId, date: today });

        if (!dailyTask) {
          // T·∫°o m·ªõi nhi·ªám v·ª• h√†ng ng√†y n·∫øu ch∆∞a t·ªìn t·∫°i
          const tasks = generateDailyTasks();
          dailyTask = new DailyTask({
            userId,
            date: today,
            quayTask: tasks.quayTask,
            keoTask: tasks.keoTask,
            billTask: tasks.billTask,
            
          });
          await dailyTask.save();
        }

        
        // L·∫•y th√¥ng tin t·ª´ BangCong2 cho h√¥m nay
        const bangCongRecordsToday = await BangCong2.find({ userId, date: { $gte: today, $lt: endOfToday } });
        const totalQuayToday = bangCongRecordsToday.reduce((acc, record) => acc + (record.quay || 0), 0);
        const totalKeoToday = bangCongRecordsToday.reduce((acc, record) => acc + (record.keo || 0), 0);
        const totalBillToday = bangCongRecordsToday.reduce((acc, record) => acc + (record.nhan_anh_bill || 0), 0);

        const taskImageUrl = await generateTaskImageUrl(userId, fullname, dailyTask.quayTask, dailyTask.keoTask, dailyTask.billTask, totalQuayToday, totalKeoToday, totalBillToday);

        
        let taskMessage = `Nhi·ªám v·ª• h√¥m nay c·ªßa ${fullname}:\n\n`;
        const tasks = [
          { name: 'Qu·∫©yü•®', completed: dailyTask.completedQuay, total: totalQuayToday, goal: dailyTask.quayTask },
          { name: 'K·∫πoüç¨', completed: dailyTask.completedKeo, total: totalKeoToday, goal: dailyTask.keoTask },
          { name: 'Bill ho·∫∑c ·∫£nh qu·∫©y (vd: 1 ·∫£nh, 1 bill)', completed: dailyTask.completedBill, total: totalBillToday, goal: dailyTask.billTask }
        ];

        for (let task of tasks) {
          if (!task.completed && task.total >= task.goal) {
            // Ho√†n th√†nh nhi·ªám v·ª•
            task.completed = true;
            const exp = Math.floor(Math.random() * 120) + 60; // Random 10-50 ƒëi·ªÉm exp
            member.levelPercent += exp * 0.1;
            // Ki·ªÉm tra n·∫øu levelPercent >= 100 th√¨ tƒÉng level
            if (member.levelPercent >= 100) {
              member.level += Math.floor(member.levelPercent / 100);
              member.levelPercent %= 100;
            }
            await member.save();

            if (task.name === 'Qu·∫©yü•®') {
              dailyTask.completedQuay = true;
            } else if (task.name === 'K·∫πoüç¨') {
              dailyTask.completedKeo = true;
            } else if (task.name === 'Bill ho·∫∑c ·∫£nh qu·∫©y (vd: 1 ·∫£nh, 1 bill)') {
              dailyTask.completedBill = true;
               
            }
            await dailyTask.save();

            bot.sendMessage(msg.chat.id, `Ch√∫c m·ª´ng ${fullname} ü•≥ ƒë√£ ho√†n th√†nh nhi·ªám v·ª• ${task.name} v√† nh·∫≠n ƒë∆∞·ª£c ${exp} ƒëi·ªÉm kinh nghi·ªám!üë∫`);
          }
          taskMessage += `Ho√†n th√†nh ${task.name}: ${task.total}/${task.goal} (Ph·∫ßn th∆∞·ªùng: ƒëi·ªÉm kinh nghi·ªám)\n\n`;
        
        }
        const gifUrl = 'https://iili.io/JQSaM6g.gif'; // Thay th·∫ø b·∫±ng URL c·ªßa ·∫£nh GIF
  
  bot.sendAnimation(msg.chat.id, gifUrl, {
  caption: taskMessage,
  reply_markup: {
    keyboard: [
      [{ text: 'Xem t√†i kho·∫£n üßæ' }, { text: 'Nhi·ªám v·ª• h√†ng ng√†y ü™Ç' }],
      [{ text: 'T√∫i ƒë·ªì üéí' }, { text: 'Nhi·ªám v·ª• nguy·ªát tr∆∞·ªùng k·ª≥ üìú' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
});
   bot.sendPhoto(msg.chat.id, taskImageUrl, { caption: 'Nhi·ªám v·ª• h√†ng ng√†y' });

      }
    } catch (error) {
      console.error('L·ªói khi truy v·∫•n d·ªØ li·ªáu:', error);
      bot.sendMessage(msg.chat.id, 'ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n d·ªØ li·ªáu.', {
        reply_markup: {
          keyboard: [
      [{ text: 'Xem t√†i kho·∫£n üßæ' }, { text: 'Nhi·ªám v·ª• h√†ng ng√†y ü™Ç' }],
      [{ text: 'T√∫i ƒë·ªì üéí' }, { text: 'Nhi·ªám v·ª• nguy·ªát tr∆∞·ªùng k·ª≥ üìú' }]
    ],
          resize_keyboard: true,
          one_time_keyboard: false
        }
      });
    }
  }
});

const getInventory = async (userId) => {
  const vipCards = await VipCard.find({ userId, validUntil: { $gte: new Date() } });
  // Th√™m c√°c lo·∫°i v·∫≠t ph·∫©m kh√°c n·∫øu c√≥
  const specialItems = []; // V√≠ d·ª• n·∫øu c√≥

  return {
    vipCards,
    specialItems
  };
};

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;

  if (text === 'Nhi·ªám v·ª• nguy·ªát tr∆∞·ªùng k·ª≥ üìú') {
    const member = await Member.findOne({ userId });
    if (!member) {
      bot.sendMessage(chatId, 'Kh√¥ng t√¨m th·∫•y th√¥ng tin th√†nh vi√™n.');
      return;
    }

    const message = `Ti·∫øn ƒë·ªô nhi·ªám v·ª• c·ªßa b·∫°n üìú:
    
- B·∫°n ƒê√£ qu·∫©y ü•®ü•Ø li√™n ti·∫øp ƒë∆∞·ª£c: ${member.consecutiveDays} ng√†y.

        Ph·∫ßn th∆∞·ªüng nhi·ªám v·ª• Tr∆∞·ªùng K·ª≥: 
        Qu·∫©y 7 ng√†y li√™n ti·∫øp : Nh·∫≠n 1 th·∫ª VIP tu·∫ßn üéüÔ∏è.
        Qu·∫©y 30 ng√†y li√™n ti·∫øp : Nh·∫≠n th·∫ª VIP th√°ng üí≥.

L∆∞u √Ω ‚ö†Ô∏è: N·∫øu kh√¥ng l√†m trong 1 ng√†y b·∫•t k·ª≥, ti·∫øn ƒë·ªô nhi·ªám v·ª• s·∫Ω tr·ªü v·ªÅ ban ƒë·∫ßu üîö.`;

    bot.sendMessage(chatId, message);
  }

  if (text === 'T√∫i ƒë·ªì üéí') {
    const member = await Member.findOne({ userId });
    if (!member) {
      bot.sendMessage(chatId, 'Kh√¥ng t√¨m th·∫•y th√¥ng tin th√†nh vi√™n.');
      return;
    }

    const vipCards = await VipCard.find({ userId, validUntil: { $gte: new Date() } });
    if (vipCards.length === 0) {
      const emptyMessage = `üéí T√∫i ƒë·ªì c·ªßa ${member.fullname} ƒëang tr·ªëng! 

M·∫πo üí°: ƒê·∫°t c√°c m·ªëc level 5, 10, 15, 20,... v√† l√†m nhi·ªám v·ª• Nguy·ªát Truy·ªÅn K·ª≥ ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c c√°c v·∫≠t ph·∫©m qu√† t·∫∑ng c√≥ gi√° tr·ªã.`;
      bot.sendMessage(chatId, emptyMessage);
    } else {
      let itemsMessage = `T√∫i ƒë·ªì c·ªßa ${member.fullname}:\n\n`;

      vipCards.forEach(card => {
        itemsMessage += `- Th·∫ª VIP bonus ${card.type === 'week' ? 'tu·∫ßn üé´' : card.type === 'month' ? 'th√°ng üé´ ' : 'level_up üé´'}: Hi·ªáu l·ª±c t·ª´ ${card.validFrom.toLocaleDateString()} ƒë·∫øn ${card.validUntil.toLocaleDateString()}\n`;
        if (card.expBonus) itemsMessage += `  ‚Ä¢ ƒêi·ªÉm kinh nghi·ªám: ${card.expBonus}\n`;
        if (card.keoBonus) itemsMessage += `  ‚Ä¢ tƒÉng ${card.keoBonus}ƒë/k·∫πo, t·ªëi ƒëa ${card.keoLimit} k·∫πo üç¨/ m·ªói l·∫ßn n·ªôp\n`;
        if (card.quayBonus) itemsMessage += `  ‚Ä¢ tƒÉng ${card.quayBonus}ƒë/qu·∫©y, t·ªëi ƒëa ${card.quayLimit} qu·∫©y/ m·ªói l·∫ßn n·ªôp ü•Øü•®\n\n`;
      });

      bot.sendMessage(chatId, itemsMessage);
    }
  }
});


const replyKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: 'Xem t√†i kho·∫£n üßæ' }, { text: 'Nhi·ªám v·ª• h√†ng ng√†y ü™Ç' }],
      [{ text: 'T√∫i ƒë·ªì üéí' }, { text: 'Nhi·ªám v·ª• nguy·ªát tr∆∞·ªùng k·ª≥ üìú' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};



// X·ª≠ l√Ω l·ªánh "/bup" ƒë·ªÉ x√≥a h·∫øt d·ªØ li·ªáu trong schema Member
bot.onText(/\/bup/, async (msg) => {
  const userId = msg.from.id;

  try {
    // Ki·ªÉm tra quy·ªÅn h·∫°n c·ªßa ng∆∞·ªùi d√πng
    // Th√™m ƒëi·ªÅu ki·ªán ki·ªÉm tra quy·ªÅn h·∫°n ·ªü ƒë√¢y n·∫øu c·∫ßn thi·∫øt

    // X√≥a h·∫øt d·ªØ li·ªáu t·ª´ schema Member
    await Message.deleteMany({});
    bot.sendMessage(msg.chat.id, 'ƒê√£ x√≥a h·∫øt d·ªØ li·ªáu t·ª´ schema Member.');
  } catch (error) {
    console.error('L·ªói khi x√≥a d·ªØ li·ªáu t·ª´ schema Member:', error);
    bot.sendMessage(msg.chat.id, 'ƒê√£ x·∫£y ra l·ªói khi x√≥a d·ªØ li·ªáu t·ª´ schema Member.');
  }
});





// L·∫Øng nghe l·ªánh /thongbao
bot.onText(/\/thongbao "(.*)" "(.*)"/, (msg, match) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;

  // Ch·ªâ cho ph√©p username @duchieu287 th·ª±c hi·ªán l·ªánh n√†y
  if (username !== 'Duchieu287') {
    bot.sendMessage(chatId, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
    return;
  }
  // ƒê·ªãnh nghƒ©a groupId m√† th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn
const groupId = -1002103270166;
  // L·∫•y t√™n t√≠nh nƒÉng v√† n·ªôi dung th√¥ng b√°o t·ª´ l·ªánh
  const featureName = match[1];
  const notificationContent = match[2];
  const currentDate = moment().format('DD/MM/YYYY');

  // ƒê·ªãnh d·∫°ng th√¥ng b√°o
  const message = `T√çNH NƒÇNG M·ªöI üîµ:\nL·∫ßn c·∫≠p nh·∫≠t g·∫ßn ƒë√¢y: ${currentDate}\n${featureName}\nN·ªôi dung c·∫≠p nh·∫≠t:\n${notificationContent}`;

  // G·ª≠i th√¥ng b√°o ƒë·∫øn groupId
  bot.sendMessage(groupId, message)
    .then(() => {
      bot.sendMessage(chatId, 'Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng.');
    })
    .catch((error) => {
      console.error('L·ªói khi g·ª≠i th√¥ng b√°o:', error);
      bot.sendMessage(chatId, 'C√≥ l·ªói x·∫£y ra khi g·ª≠i th√¥ng b√°o.');
    });
});
