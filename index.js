const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const request = require('request');
const cron = require('node-cron'); // Th∆∞ vi·ªán ƒë·ªÉ thi·∫øt l·∫≠p cron jobs
const keep_alive = require('./keep_alive.js')
const { resetDailyGiftStatus, sendMorningMessage, handleGiftClaim } = require('./gift');
const { setupNewsSchedule, sendLatestNews } = require('./news.js');
const handleNewChatMembers = require('./ban'); // Nh·∫≠p module ban

// K·∫øt n·ªëi t·ªõi MongoDB
mongoose.connect(
  'mongodb+srv://duchieufaryoung0:80E9gUahdOXmGKuy@cluster0.6nlv1cv.mongodb.net/telegram_bot_db?retryWrites=true&w=majority',
  { useNewUrlParser: true, useUnifiedTopology: true }
);
const db = mongoose.connection;

// ƒê·ªãnh nghƒ©a schema cho b·∫£ng c√¥ng
const BangCongSchema = new mongoose.Schema({
  userId: Number,
  groupId: Number,
  date: Date,
  ten: String,
  quay: Number,
  keo: Number,
  tinh_tien: Number,
  giftWon: { type: Boolean, default: false },
  prizeAmount: { type: Number, default: 0 },
});

// T·∫°o model t·ª´ schema
const BangCong2 = mongoose.model('BangCong2', BangCongSchema);

// ƒê·ªãnh nghƒ©a schema cho tr·∫°ng th√°i h√†ng ng√†y
const DailyGiftStatusSchema = new mongoose.Schema({
  date: String,
  dailyGiftClaims: [Number], // Danh s√°ch c√°c user ƒë√£ nh·∫≠n qu√†
  giftWonToday: { type: Boolean, default: false },
});

const DailyGiftStatus = mongoose.model('DailyGiftStatus', DailyGiftStatusSchema);

const token = '7150645082:AAH-N2VM6qx3iFEhK59YHx2e1oy3Bi1EzXc';
const bot = new TelegramBot(token, { polling: true });

// Chu·ªói c·∫•mm
const bannedStringsRegex = /(ca\s?1|ca1|ca\s?2|Ca\s?2|Ca\s?1|Ca1|Ca\s?2|Ca2|C1|C2|c\s?1|c\s?2|C\s?1|C\s?2)\s*/gi;

// Thi·∫øt l·∫≠p cron job ƒë·ªÉ x√≥a d·ªØ li·ªáu b·∫£ng c√¥ng c·ªßa 2 ng√†y tr∆∞·ªõc, ngo·∫°i tr·ª´ b·∫£ng c√¥ng c√≥ groupId -1002108234982
cron.schedule('0 0 * * *', async () => {
  const twoDaysAgo = new Date();
  twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
  const formattedTwoDaysAgo = new Date(twoDaysAgo.toLocaleDateString());

  try {
    const result = await BangCong2.deleteMany({
      date: formattedTwoDaysAgo,
      groupId: { $ne: -1002108234982 }, // Lo·∫°i tr·ª´ c√°c b·∫£ng c√¥ng v·ªõi groupId n√†y
    });
    console.log(`ƒê√£ x√≥a ${result.deletedCount} b·∫£ng c√¥ng c·ªßa ng√†y ${formattedTwoDaysAgo.toLocaleDateString()}`);
  } catch (error) {
    console.error("L·ªói khi x√≥a d·ªØ li·ªáu t·ª´ MongoDB:", error);
  }
});

            
// T√¨m c√°c s·ªë theo sau b·ªüi k√Ω t·ª± ho·∫∑c t·ª´ kh√≥a x√°c ƒë·ªãnh h√†nh vi
const regex = /\d+(q|Q|c|C|qu·∫©y|c·ªông|acc)/gi;


bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  // Ch·ªâ ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i l√† nh√≥m c√≥ ID
  if (chatId !== -1002103270166) {
    // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a chu·ªói c·∫•m
    // Ki·ªÉm tra c·∫£ vƒÉn b·∫£n v√† ch√∫ th√≠ch
  const messageContent = msg.text || msg.caption;
  if (messageContent) {
    // Ch·ªâ th·ª±c hi·ªán ki·ªÉm tra b·∫£ng c√¥ng n·∫øu tin nh·∫Øn ch·ª©a chu·ªói c·∫•m
    if (regex.test(messageContent)) {
    const matches = messageContent.match(regex);
      const userId = msg.from.id;
      const groupId = chatId;
      
    
      // T√¨m t·∫•t c·∫£ s·ªë v√† k√Ω t·ª± sau s·ªë
      // T√¨m t·∫•t c·∫£ s·ªë theo sau b·ªüi q, c, Q, C, qu·∫©y, c·ªông, ho·∫∑c acc
      
      let quay = 0;
      let keo = 0;

      if (matches) {
        matches.forEach((match) => {
          const number = parseInt(match); // L·∫•y s·ªë
          const suffix = match.slice(number.toString().length); // L·∫•y ch·ªØ c√°i ho·∫∑c t·ª´ theo sau s·ªë

          if (suffix.toLowerCase() === 'q' || suffix.toLowerCase() === 'p') {
            quay += number; // N·∫øu sau s·ªë l√† "q" ho·∫∑c "Q", th√™m v√†o "quay"
          } else if (suffix.toLowerCase() === 'c' || suffix === 'acc') {
            keo += number; // N·∫øu sau s·ªë l√† "c", "C", ho·∫∑c "acc", th√™m v√†o "keo"
          } else if (suffix === 'qu·∫©y') {
            quay += number; // N·∫øu sau s·ªë l√† "qu·∫©y", th√™m v√†o "quay"
          } else if (suffix === 'c·ªông') {
            keo += number; // N·∫øu sau s·ªë l√† "c·ªông", th√™m v√†o "keo"
          }
        });
      }

        const currentDate = new Date().toLocaleDateString();
        const firstName = msg.from.first_name;
        const lastName = msg.from.last_name;
        const fullName = lastName ? `${firstName} ${lastName}` : firstName;
        
        // T·∫°o th√¥ng b√°o m·ªõi
        const responseMessage = `B√†i n·ªôp c·ªßa ${fullName} ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v·ªõi ${quay}q, ${keo}c ƒëang ch·ªù ki·ªÉm tra ‚ù§ü•≥`;

        // G·ª≠i th√¥ng b√°o m·ªõi v√† l∆∞u b·∫£ng c√¥ng
        bot.sendMessage(chatId, responseMessage, { reply_to_message_id: msg.message_id }).then(async () => {
        let bangCong = await BangCong2.findOne({ userId, groupId, date: currentDate });

        if (!bangCong) {
          bangCong = await BangCong2.create({
            userId,
            groupId,
            date: currentDate,
            ten: fullName,
            quay,
            keo,
            tinh_tien: quay * 500 + keo * 1000,
          });
        } else {
          bangCong.quay += quay;
          bangCong.keo += keo;
          bangCong.tinh_tien += quay * 500 + keo * 1000;

          await bangCong.save();
        }
      });
    
  }
  }
  }
});
       
                                             
          
// B·∫£ng tra c·ª©u t√™n nh√≥m d·ª±a tr√™n ID nh√≥m
const groupNames = {
  "-1002039100507": "C·ªòNG ƒê·ªíNG N·∫ÆM B·∫ÆT C∆† H·ªòI",
  "-1002004082575": "KH√îNG NG·ª™NG PH√ÅT TRI·ªÇN",
  "-1002123430691": "D·∫™N L·ªêI TH√ÄNH C√îNG",
  "-1002143712364": "THU NH·∫¨P M·ªñI NG√ÄY",
  "-1002128975957": "C·ªòNG ƒê·ªíNG KH·ªûI NGHI·ªÜP",
  "-1002129896837": "KH√îNG NG·ª™NG ƒê·ªîI M·ªöI",
  "-1002091101362": "CURRENCY SHINING STAR GROUP", 
  "-1002080535296": "C·ªòNG ƒê·ªíNG VI·ªÜT NAM", 
};

// X·ª≠ l√Ω l·ªánh /bc ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng c√¥ng cho t·∫•t c·∫£ c√°c nh√≥m
bot.onText(/\/bc/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const currentDate = new Date().toLocaleDateString(); // Ng√†y hi·ªán t·∫°i
    // L·∫•y b·∫£ng c√¥ng cho ng√†y hi·ªán t·∫°i, lo·∫°i tr·ª´ nh√≥m c√≥ chatId -1002050799248
    const bangCongs = await BangCong2.find({
      date: currentDate,
      groupId: { $ne: -1002108234982 }, // Lo·∫°i tr·ª´ nh√≥m n√†y
    });

    if (bangCongs.length === 0) {
      bot.sendMessage(chatId, "Kh√¥ng c√≥ b·∫£ng c√¥ng n√†o cho ng√†y h√¥m nay.");
      return;
    }

    // T·∫°o b·∫£ng c√¥ng ph√¢n lo·∫°i theo ID nh√≥m
    const groupedByGroupId = {};
    bangCongs.forEach((bangCong) => {
      const groupId = bangCong.groupId ? bangCong.groupId.toString() : ''; // Ki·ªÉm tra n·∫øu groupId kh√¥ng undefined
      if (!groupedByGroupId[groupId]) {
        groupedByGroupId[groupId] = [];
      }
      groupedByGroupId[groupId].push(bangCong);
    });

    let response = '';

    // T·∫°o b·∫£ng c√¥ng cho m·ªói nh√≥m
    for (const groupId in groupedByGroupId) {
      if (!groupId) {
        continue; // B·ªè qua n·∫øu groupId kh√¥ng h·ª£p l·ªá
      }

      const groupData = groupedByGroupId[groupId];
      const groupName = groupNames[groupId] || `Nh√≥m ${groupId}`; // L·∫•y t√™n nh√≥m t·ª´ b·∫£ng tra c·ª©u

      response += `B·∫£ng c√¥ng nh√≥m ${groupName}:\n\n`;

      let totalGroupMoney = 0; // Bi·∫øn ƒë·ªÉ t√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa nh√≥m

      groupData.forEach((bangCong) => {
        if (bangCong.tinh_tien !== undefined) { // Ki·ªÉm tra tr∆∞·ªõc khi truy c·∫≠p thu·ªôc t√≠nh
          const formattedTien = bangCong.tinh_tien.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
          response += `${bangCong.ten}\t\t${bangCong.quay}q +\t${bangCong.keo}c\t${formattedTien}vnƒë\n`;
          totalGroupMoney += bangCong.tinh_tien; // T√≠nh t·ªïng ti·ªÅn
        }
      });

      const formattedTotal = totalGroupMoney.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      response += `T·ªïng ti·ªÅn: ${formattedTotal}vnƒë\n\n`; // Hi·ªÉn th·ªã t·ªïng ti·ªÅn c·ªßa nh√≥m
    }

    // N·∫øu response d√†i h∆°n 4000 k√Ω t·ª±, t√°ch th√†nh hai ph·∫ßn
    if (response.length > 4000) {
      const middle = Math.floor(response.length / 2);
      const splitIndex = response.lastIndexOf('\n', middle); // T√¨m d·∫•u ng·∫Øt d√≤ng g·∫ßn gi·ªØa nh·∫•t ƒë·ªÉ chia

      const firstPart = response.substring(0, splitIndex).trim();
      const secondPart = response.substring(splitIndex).trim();

      bot.sendMessage(chatId, firstPart); // G·ª≠i ph·∫ßn ƒë·∫ßu ti√™n
      bot.sendMessage(chatId, secondPart); // G·ª≠i ph·∫ßn c√≤n l·∫°i
    } else {
      bot.sendMessage(chatId, response.trim()); // N·∫øu kh√¥ng d√†i qu√°, g·ª≠i b√¨nh th∆∞·ªùng
    }
  } catch (error) {
    console.error('L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ MongoDB:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu.');
  }
});



   

bot.onText(/\/tong/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const currentDate = new Date(); // Ng√†y hi·ªán t·∫°i

    // Truy v·∫•n ƒë·ªÉ t·ªïng h·ª£p b·∫£ng c√¥ng c·ªßa c√°c th√†nh vi√™n trong ng√†y hi·ªán t·∫°i
    const aggregatedData = await BangCong2.aggregate([
      {
        $match: { date: new Date(currentDate.toLocaleDateString()),
        groupId: { $ne: -1002108234982 }, // Lo·∫°i tr·ª´ nh√≥m -1002050799248 // L·ªçc theo ng√†y hi·ªán t·∫°i
      },
      },

      {
        $group: {
          _id: {
            userId: "$userId",
            ten: "$ten",
          },
          totalQuay: { $sum: "$quay" },
          totalKeo: { $sum: "$keo" },
          totalTinhTien: { $sum: "$tinh_tien" },
        },
      },
      {
        $sort: { totalTinhTien: -1 }, // S·∫Øp x·∫øp theo t·ªïng ti·ªÅn gi·∫£m d·∫ßn
      },
    ]);

    if (aggregatedData.length === 0) {
      bot.sendMessage(chatId, "Kh√¥ng c√≥ b·∫£ng c√¥ng n√†o cho ng√†y h√¥m nay.");
      return;
    }

    let response = "B·∫£ng c√¥ng t·ªïng h·ª£p cho ng√†y h√¥m nay:\n\n";
    response += "H·ªå T√äNüë©‚Äçüé§\t\tQU·∫®YüíÉ\tC·ªòNG‚ûï\tT·ªîNG TI·ªÄNüí∞\n";

    aggregatedData.forEach((data) => {
      const formattedTotal = data.totalTinhTien.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      response += `${data._id.ten}\t\t${data.totalQuay}q +\t${data.totalKeo}c\t${formattedTotal}vnƒë\n`;
    });

    bot.sendMessage(chatId, response);
  } catch (error) {
    console.error("L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ MongoDB:", error);
    bot.sendMessage(chatId, "ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu.");
  }
});

// L·ªánh /reset ƒë·ªÉ x√≥a b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc
bot.onText(/\/reset/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    // Ng√†y hi·ªán t·∫°i
    const currentDate = new Date().toLocaleDateString();
    
    // X√≥a t·∫•t c·∫£ b·∫£ng c√¥ng c√≥ ng√†y tr∆∞·ªõc ng√†y hi·ªán t·∫°i
    const result = await BangCong2.deleteMany({
      date: { $lt: currentDate },
      groupId: { $ne: -1002108234982 }, // Lo·∫°i tr·ª´ nh√≥m c√≥ chatId -1002050799248
    });

    bot.sendMessage(chatId, `ƒê√£ x√≥a ${result.deletedCount} b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc.`);
  } catch (error) {
    console.error('L·ªói khi x√≥a b·∫£ng c√¥ng:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi x√≥a b·∫£ng c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
  }
});

// H√†m lo·∫°i b·ªè icon v√† emoji t·ª´ t√™n
const normalizeName = (name) => {
  // Lo·∫°i b·ªè c√°c icon, emoji ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng ph·∫£i ch·ªØ c√°i
  return name.replace(/[^\w\s]/gi, '').toLowerCase().trim();
};

// L·ªánh /edit ƒë·ªÉ ch·ªânh s·ª≠a b·∫£ng c√¥ng
bot.onText(/\/edit (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const text = match[1]; // Ph·∫ßn sau "/edit"

  // Ph√¢n t√≠ch c√∫ ph√°p ƒë·ªÉ l·∫•y c√°c tham s·ªë
  const parts = text.split(',');
  if (parts.length !== 4) {
    bot.sendMessage(chatId, 'ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá. ƒê√∫ng ƒë·ªãnh d·∫°ng l√†: /edit groupId, ten, quay, keo.');
    return;
  }

  const [groupId, rawTen, quayStr, keoStr] = parts.map((p) => p.trim());
  const quay = parseInt(quayStr, 10); // Chuy·ªÉn ƒë·ªïi quay th√†nh s·ªë nguy√™n
  const keo = parseInt(keoStr, 10); // Chuy·ªÉn ƒë·ªïi keo th√†nh s·ªë nguy√™n

  if (isNaN(quay) || isNaN(keo)) {
    bot.sendMessage(chatId, 'Quay v√† Keo ph·∫£i l√† s·ªë.');
    return;
  }

  try {
    const normalizedRawTen = normalizeName(rawTen); // Chu·∫©n h√≥a t√™n ƒë·∫ßu v√†o

    const currentDate = new Date().toLocaleDateString();

    // T√¨m b·∫£ng c√¥ng v·ªõi t√™n g·∫ßn ƒë√∫ng (lo·∫°i b·ªè icon v√† emoji)
    const bangCong = await BangCong2.findOne({
      groupId,
      date: currentDate,
      ten: { $regex: normalizedRawTen, $options: 'i' }, // So kh·ªõp kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng
    });

    if (!bangCong) {
      bot.sendMessage(chatId, `Kh√¥ng t√¨m th·∫•y b·∫£ng c√¥ng cho th√†nh vi√™n c√≥ t√™n g·∫ßn ƒë√∫ng v·ªõi "${rawTen}" trong nh√≥m ${groupId}.`);
      return;
    }

    // C·∫≠p nh·∫≠t quay v√† keo
    bangCong.quay = quay;
    bangCong.keo = keo;

    // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
    bangCong.tinh_tien = quay * 500 + keo * 1000;

    await bangCong.save(); // L∆∞u thay ƒë·ªïi

    bot.sendMessage(chatId, `B·∫£ng c√¥ng cho th√†nh vi√™n c√≥ t√™n g·∫ßn ƒë√∫ng v·ªõi "${rawTen}" trong nh√≥m ${groupId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`);
  } catch (error) {
    console.error('L·ªói khi ch·ªânh s·ª≠a b·∫£ng c√¥ng:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi ch·ªânh s·ª≠a b·∫£ng c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
  }
});

// C√°c x·ª≠ l√Ω kh√°c (v√≠ d·ª•: x·ª≠ l√Ω message)
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  // C√°c ƒëo·∫°n m√£ kh√°c nh∆∞ x·ª≠ l√Ω b·∫£ng c√¥ng...
});

// L·ªánh /bc2 ƒë·ªÉ xem b·∫£ng c√¥ng t·ª´ng ng√†y c·ªßa nh√≥m -1002050799248 v√† b·∫£ng t·ªïng s·ªë ti·ªÅn c·ªßa t·ª´ng th√†nh vi√™n trong b·∫£ng c√¥ng c√°c ng√†y
bot.onText(/\/bangcong2/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const currentDate = new Date().toLocaleDateString();

    // T√¨m t·∫•t c·∫£ b·∫£ng c√¥ng cho nh√≥m -1002050799248
    const bangCongs = await BangCong2.find({ groupId: -1002108234982 });

    if (bangCongs.length === 0) {
      bot.sendMessage(chatId, "Kh√¥ng c√≥ b·∫£ng c√¥ng n√†o cho nh√≥m Be truly rich");
      return;
    }

    // Ph√¢n lo·∫°i b·∫£ng c√¥ng theo ng√†y
    const groupedByDate = {};
    bangCongs.forEach((bangCong) => {
      const date = bangCong.date;
      if (!groupedByDate[date]) {
        groupedByDate[date] = [];
      }
      groupedByDate[date].push(bangCong);
    });

    let response = '';

    // T·∫°o b·∫£ng c√¥ng cho t·ª´ng ng√†y
    for (const date in groupedByDate) {
      const dayData = groupedByDate[date];
      response += `B·∫£ng c√¥ng ng√†y ${date}:\n\n`;

      dayData.forEach((bangCong) => {
        const formattedTien = bangCong.tinh_tien.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
        response += `${bangCong.ten}\t\t${bangCong.quay}q +\t${bangCong.keo}c\t${formattedTien}vnƒë\n`;
      });

      response += '\n';
    }

    // T√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa t·ª´ng th√†nh vi√™n
    const totalByMember = {};
    bangCongs.forEach((bangCong) => {
      if (!totalByMember[bangCong.ten]) {
        totalByMember[bangCong.ten] = 0;
      }
      totalByMember[bangCong.ten] += bangCong.tinh_tien;
    });

    response += 'B·∫£ng t·ªïng s·ªë ti·ªÅn c·ªßa t·ª´ng th√†nh vi√™n:\n\n';
    for (const member in totalByMember) {
      const formattedTotal = totalByMember[member].toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      response += `${member}: ${formattedTotal}vnƒë\n`;
    }

    bot.sendMessage(chatId, response.trim());
  } catch (error) {
    console.error('L·ªói khi truy v·∫•n b·∫£ng c√¥ng:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n b·∫£ng c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
  }
});

// L·ªánh /reset2 ƒë·ªÉ x√≥a b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc t·ª´ nh√≥m c√≥ chatId -1002050799248
bot.onText(/\/xoa/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const currentDate = new Date().toLocaleDateString();

    // X√≥a t·∫•t c·∫£ b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc cho nh√≥m c√≥ chatId -1002050799248
    const result = await BangCong2.deleteMany({
      date: { $lt: currentDate },
      groupId: -1002108234982, // Ch·ªâ x√≥a b·∫£ng c√¥ng c·ªßa nh√≥m n√†y
    });

    bot.sendMessage(chatId, `ƒê√£ x√≥a ${result.deletedCount} b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc t·ª´ nh√≥m -1002050799248.`);
  } catch (error) {
    console.error('L·ªói khi x√≥a b·∫£ng c√¥ng:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi x√≥a b·∫£ng c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
  }
});

// X·ª≠ l√Ω l·ªánh /bchomqua ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng c√¥ng cho t·∫•t c·∫£ c√°c nh√≥m
bot.onText(/\/homqua/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    // T√≠nh ng√†y h√¥m qua
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const formattedYesterday = yesterday.toLocaleDateString(); // ƒê·ªãnh d·∫°ng ng√†y ƒë·ªÉ d√πng trong truy v·∫•n

    // L·∫•y b·∫£ng c√¥ng c·ªßa ng√†y h√¥m qua, lo·∫°i tr·ª´ nh√≥m c√≥ chatId -1002108234982
    const bangCongs = await BangCong2.find({
      date: formattedYesterday,
      groupId: { $ne: -1002108234982 }, // Lo·∫°i tr·ª´ nh√≥m n√†y
    });

    if (bangCongs.length === 0) {
      bot.sendMessage(chatId, `Kh√¥ng c√≥ b·∫£ng c√¥ng n√†o cho ng√†y ${formattedYesterday}.`);
      return;
    }

    // T·∫°o b·∫£ng c√¥ng ph√¢n lo·∫°i theo ID nh√≥m
    const groupedByGroupId = {};
    bangCongs.forEach((bangCong) => {
      const groupId = bangCong.groupId ? bangCong.groupId.toString() : '';
      if (!groupedByGroupId[groupId]) {
        groupedByGroupId[groupId] = [];
      }
      groupedByGroupId[groupId].push(bangCong);
    });

    let response = '';

    // T·∫°o b·∫£ng c√¥ng cho m·ªói nh√≥m
    for (const groupId in groupedByGroupId) {
      if (!groupId) {
        continue;
      }

      const groupData = groupedByGroupId[groupId];
      const groupName = groupNames[groupId] || `Nh√≥m ${groupId}`;

      response += `B·∫£ng c√¥ng nh√≥m ${groupName} (${formattedYesterday}):\n\n`;

      let totalGroupMoney = 0;

      groupData.forEach((bangCong) => {
        if (bangCong.tinh_tien !== undefined) {
          const formattedTien = bangCong.tinh_tien.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
          response += `${bangCong.ten}\t\t${bangCong.quay}q +\t${bangCong.keo}c\t${formattedTien}vnƒë\n`;
          totalGroupMoney += bangCong.tinh_tien;
        }
      });

      const formattedTotal = totalGroupMoney.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      response += `T·ªïng ti·ªÅn: ${formattedTotal}vnƒë\n\n`;
    }

    // Ki·ªÉm tra ƒë·ªô d√†i response v√† g·ª≠i tin nh·∫Øn
    if (response.length > 4000) {
      const middle = Math.floor(response.length / 2);
      const splitIndex = response.lastIndexOf('\n', middle);

      const firstPart = response.substring(0, splitIndex).trim();
      const secondPart = response.substring(splitIndex).trim();

      bot.sendMessage(chatId, firstPart);
      bot.sendMessage(chatId, secondPart);
    } else {
      bot.sendMessage(chatId, response.trim());
    }
  } catch (error) {
    console.error('L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ MongoDB:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu.');
  }
});


const timezoneOffset = 1 * 60 * 60 * 1000; // M√∫i gi·ªù Vi·ªát Nam (UTC +7)

// H√†m g·ª≠i b·∫£ng c√¥ng
const sendBangCong = async (chatId) => {
  const currentDate = new Date(new Date().getTime() + timezoneOffset).toLocaleDateString();
  const maxRetries = 10; // S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa
  let retries = 0;
  let sent = false;

  while (!sent && retries < maxRetries) {
    try {
      const bangCongs = await BangCong2.find({
        date: currentDate,
        groupId: { $ne: -1002108234982 }, // Lo·∫°i tr·ª´ nh√≥m n√†y
      });

      if (bangCongs.length === 0) {
        bot.sendMessage(chatId, "Kh√¥ng c√≥ b·∫£ng c√¥ng n√†o cho ng√†y h√¥m nay.");
        return;
      }

      const groupedByGroupId = {};
      bangCongs.forEach((bangCong) => {
        const groupId = bangCong.groupId ? bangCong.groupId.toString() : ''; // Ki·ªÉm tra n·∫øu groupId kh√¥ng undefined
        if (!groupedByGroupId[groupId]) {
          groupedByGroupId[groupId] = [];
        }
        groupedByGroupId[groupId].push(bangCong);
      });

      let response = '';

      for (const groupId in groupedByGroupId) {
        if (!groupId) {
          continue;
        }

        const groupData = groupedByGroupId[groupId];
        const groupName = groupNames[groupId] || `Nh√≥m ${groupId}`; // L·∫•y t√™n nh√≥m t·ª´ b·∫£ng tra c·ª©u

        response += `B·∫£ng c√¥ng nh√≥m ${groupName}:\n\n`;

        let totalGroupMoney = 0; // Bi·∫øn ƒë·ªÉ t√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa nh√≥m

        groupData.forEach((bangCong) => {
          if (bangCong.tinh_tien !== undefined) { // Ki·ªÉm tra tr∆∞·ªõc khi truy c·∫≠p thu·ªôc t√≠nh
            const formattedTien = bangCong.tinh_tien.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
            response += `${bangCong.ten}\t\t${bangCong.quay}q +\t${bangCong.keo}c\t${formattedTien}vnƒë\n`;
            totalGroupMoney += bangCong.tinh_tien;
          }
        });

        const formattedTotal = totalGroupMoney.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
        response += `T·ªïng ti·ªÅn: ${formattedTotal}vnƒë\n\n`;
      }

      if (response.length > 4000) {
        const middle = Math.floor(response.length / 2);
        const splitIndex = response.lastIndexOf('\n', middle);

        const firstPart = response.substring(0, splitIndex).trim();
        const secondPart = response.substring(splitIndex).trim();

        bot.sendMessage(chatId, firstPart);
        bot.sendMessage(chatId, secondPart);
      } else {
        bot.sendMessage(chatId, response.trim());
      }

      sent = true; // N·∫øu g·ª≠i th√†nh c√¥ng, tho√°t v√≤ng l·∫∑p
    } catch (error) {
      console.error('L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ MongoDB:', error);
      retries++; // TƒÉng s·ªë l·∫ßn th·ª≠ l·∫°i
      if (retries < maxRetries) {
        await new Promise((resolve) => setTimeout(resolve, 30 * 60 * 1000)); // Ch·ªù 30 ph√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i
      }
    }
  }

  if (!sent) {
    bot.sendMessage(chatId, 'Kh√¥ng th·ªÉ g·ª≠i b·∫£ng c√¥ng tr∆∞·ªõc 7h s√°ng.');
  }
};

// Thi·∫øt l·∫≠p cron job g·ª≠i v√†o l√∫c 2h s√°ng h√†ng ng√†y (gi·ªù Vi·ªát Nam)
cron.schedule('0 18 * * *', async () => {
  const chatId = -1002128289933; // ID nh√≥m m√† b·∫°n mu·ªën g·ª≠i
  await sendBangCong(chatId);
});

// Thay th·∫ø YOUR_API_KEY b·∫±ng API key OpenWeatherMap c·ªßa b·∫°n
const apiKey = '679360c3eef6d2165d3833d29b5eccf4';

// ChatId c·ªßa nh√≥m b·∫°n mu·ªën g·ª≠i d·ª± b√°o th·ªùi ti·∫øt
const chatId = -1002103270166;

// B·∫£ng d·ªãch c√°c tr·∫°ng th√°i th·ªùi ti·∫øt t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát
const weatherDescriptions = {
  'clear sky': 'ng√†y n·∫Øng n√≥ng, c√≥ n∆°i n·∫Øng n√≥ng gay g·∫Øt üå§Ô∏è',
  'few clouds': 'ng√†y n·∫Øng n√≥ng üå§Ô∏è',
  'scattered clouds': 'C√≥ m√¢y ‚òÅ',
  'broken clouds': 'Nhi·ªÅu m√¢y ‚òÅ',
  'overcast clouds': 'Nhi·ªÅu m√¢y ‚òÅ',
  'shower rain': 'ng√†y m∆∞a r√†o v√† r·∫£i r√°c c√≥ gi√¥ng üå´Ô∏è',
  'rain': 'ng√†y c√≥ m∆∞a r√†o v√† c√≥ gi√¥ng v√†i n∆°i üå´Ô∏è',
  'thunderstorm': 'C·ª• b·ªô c√≥ m∆∞a to',
  'squall': 'Gi√≥ gi·∫≠t',
  'drizzle': 'm∆∞a nh·ªè',
  'light rain': 'ng√†y c√≥ l√∫c c√≥ m∆∞a r√†o v√† r·∫£i r√°c c√≥ gi√¥ng üå´Ô∏è',
  'moderate rain': 'c√≥ m∆∞a v·ª´a ƒë·∫øn m∆∞a to',
  'heavy rain': 'm∆∞a to',
  'light thunderstorm': 'gi√¥ng r·∫£i r√°c',
  'thunderstorm with heavy rain': 'm∆∞a r√†o v√† gi√¥ng v√†i n∆°i üå´Ô∏è',
  'heavy thunderstorm': 'c√≥ gi√¥ng v√†i n∆°i',
  'cold': 'tr·ªùi l·∫°nh',
  'hot': 'c√≥ n·∫Øng n√≥ng',
};

// B·∫£ng √°nh x·∫° ƒë·ªÉ tr√°nh tr√πng l·∫∑p c√¢u t·ª´
const stateMapping = {
  'ng√†y c√≥ l√∫c c√≥ m∆∞a r√†o v√† r·∫£i r√°c c√≥ gi√¥ng üå´Ô∏è': 'c√≥ m∆∞a v·ª´a, m∆∞a to v√† c√≥ n∆°i c√≥ gi√¥ng üå´Ô∏è',
  'ng√†y c√≥ m∆∞a r√†o v√† c√≥ gi√¥ng v√†i n∆°i üå´Ô∏è': 'c√≥ m∆∞a r√†o v√† gi√¥ng r·∫£i r√°c üå´Ô∏è',
  'tr·ªùi n·∫Øng': 'tr·ªùi quang ƒë√£ng',
  // (Th√™m c√°c √°nh x·∫° kh√°c n·∫øu c·∫ßn)
};

// H√†m l·∫•y h∆∞·ªõng gi√≥ d·ª±a tr√™n ƒë·ªô
function getWindDirection(deg) {
  if (deg >= 337.5 || deg < 22.5) return 'B·∫Øc';
  if (deg >= 22.5 && deg < 67.5) return 'ƒê√¥ng B·∫Øc';
  if (deg >= 67.5 && deg < 112.5) return 'ƒê√¥ng';
  if (deg >= 112.5 && deg < 157.5) return 'ƒê√¥ng Nam';
  if (deg >= 157.5 && deg < 202.5) return 'Nam';
  if (deg >= 202.5 && deg < 247.5) return 'T√¢y Nam';
  if (deg >= 247.5 && deg < 292.5) return 'T√¢y';
  if (deg >= 292.5 && deg < 337.5) return 'T√¢y B·∫Øc';
}

// H√†m l·∫•y c·∫•p gi√≥ d·ª±a tr√™n t·ªëc ƒë·ªô gi√≥
function getWindSpeedLevel(windSpeed) {
  if (windSpeed < 2) return 1;
  if (windSpeed >= 2 && windSpeed < 5) return 2;
  if (windSpeed >= 5 && windSpeed < 10) return 3;
  if (windSpeed >= 10 && windSpeed < 17) return 4;
  if (windSpeed >= 17 && windSpeed < 25) return 5;
  if (windSpeed >= 25 && windSpeed < 33) return 6;
  if (windSpeed >= 33 && windSpeed < 42) return 7;
  if (windSpeed >= 42 && windSpeed < 52) return 8;
  if (windSpeed >= 52 && windSpeed < 63) return 9;
  if (windSpeed >= 63) return 10;
}

// H√†m l·∫•y tr·∫°ng th√°i th·ªùi ti·∫øt ph·ªï bi·∫øn nh·∫•t
function getMostCommonWeatherDescription(descriptions) {
  const count = descriptions.reduce((acc, desc) => {
    if (!acc[desc]) {
      acc[desc] = 1;
    } else {
      acc[desc] += 1;
    }
    return acc;
  }, {});

  let mostCommon = '';
  let maxCount = 0;

  for (const desc in count) {
    if (count[desc] > maxCount) {
      mostCommon = desc;
      maxCount = count[desc];
    }
  }

  return mostCommon;
}

// H√†m ƒë·ªãnh d·∫°ng ng√†y theo chu·∫©n "ng√†y/th√°ng/nƒÉm"
function formatDate(date) {
  const formatter = new Intl.DateTimeFormat('vi-VN', {
    day: 'numeric',
    month: 'numeric',
    year: 'numeric'
  });
  return formatter.format(date);
}

// H√†m ch·ªçn ·∫£nh GIF d·ª±a tr√™n tr·∫°ng th√°i th·ªùi ti·∫øt
function selectWeatherGif(morningDescription, eveningDescription) {
  const rainKeywords = ['ng√†y c√≥ l√∫c c√≥ m∆∞a r√†o v√† r·∫£i r√°c c√≥ gi√¥ng üå´Ô∏è', 'ng√†y c√≥ m∆∞a r√†o v√† c√≥ gi√¥ng v√†i n∆°i üå´Ô∏è', 'c√≥ m∆∞a r√†o v√† gi√¥ng r·∫£i r√°c üå´Ô∏è'];
  const cloudKeywords = ['C√≥ m√¢y ‚òÅÔ∏è', 'Nhi·ªÅu m√¢y ‚òÅ', 'Nhi·ªÅu m√¢y ‚òÅ'];
  const sunKeywords = ['ng√†y n·∫Øng n√≥ng üå§Ô∏è', 'ng√†y n·∫Øng n√≥ng, c√≥ n∆°i n·∫Øng n√≥ng gay g·∫Øt üå§Ô∏è'];

  // N·∫øu bu·ªïi s√°ng ho·∫∑c bu·ªïi chi·ªÅu t·ªëi c√≥ m∆∞a r√†o, gi√¥ng v√† c√≥ m√¢y
  if (rainKeywords.some(k => morningDescription.includes(k)) || rainKeywords.some(k => eveningDescription.includes(k))) {
    if (cloudKeywords.some(k => morningDescription.includes(k)) || cloudKeywords.some(k => eveningDescription.includes(k))) {
      return 'https://iili.io/JrX4YXe.gif'; // GIF cho m∆∞a v√† m√¢y
    }
  }

  // N·∫øu bu·ªïi s√°ng ho·∫∑c bu·ªïi chi·ªÅu t·ªëi c√≥ n·∫Øng ho·∫∑c n·∫Øng n√≥ng
  if (sunKeywords.some(k => morningDescription.includes(k)) || sunKeywords.some(k => eveningDescription.includes(k))) {
    return 'https://iili.io/JrXfzI1.gif'; // GIF cho tr·ªùi n·∫Øng
  }

  // N·∫øu kh√¥ng c√≥ m∆∞a r√†o v√† gi√¥ng
  if (!rainKeywords.some(k => morningDescription.includes(k)) && !rainKeywords.some(k => eveningDescription.includes(k))) {
    return 'https://iili.io/JrXLVxS.gif'; // GIF cho th·ªùi ti·∫øt kh√¥ng m∆∞a r√†o v√† gi√¥ng
  }

  return null; // Kh√¥ng c√≥ GIF
}



// H√†m l·∫•y d·ª± b√°o th·ªùi ti·∫øt chi ti·∫øt cho H√† N·ªôi
function getDailyWeatherForecast() {
  const url = `https://api.openweathermap.org/data/2.5/forecast?q=Hanoi,Vietnam&appid=${apiKey}&units=metric`;

  request(url, (error, response, body) => {
    if (error) {
      console.error('L·ªói khi k·∫øt n·ªëi t·ªõi OpenWeatherMap:', error);
      return;
    }

    const data = JSON.parse(body);
    const forecasts = data.list;

    // L·∫•y ng√†y hi·ªán t·∫°i t·ª´ timestamp v√† ƒë·ªãnh d·∫°ng th√†nh "ng√†y/th√°ng/nƒÉm"
    const currentDate = formatDate(new Date(forecasts[0].dt * 1000));

    // T√¨m nhi·ªát ƒë·ªô th·∫•p nh·∫•t v√† cao nh·∫•t trong ng√†y
    const minTemp = Math.min(...forecasts.map(f => f.main.temp_min));
    const maxTemp = Math.max(...forecasts.map(f => f.main.temp_max));

    // Bu·ªïi s√°ng ch·ªâ hi·ªÉn th·ªã t·ªïng 2 tr·∫°ng th√°i
    const morningForecasts = forecasts.slice(0, 4); // D·ª± b√°o bu·ªïi s√°ng
    
    // Tr·∫°ng th√°i m√¢y duy nh·∫•t
    const cloudTypes = ['C√≥ m√¢y ‚òÅÔ∏è', 'Nhi·ªÅu m√¢y ‚òÅ', 'Nhi·ªÅu m√¢y ‚òÅ'];
    const uniqueCloudDescription = morningForecasts
      .map(f => weatherDescriptions[f.weather[0].description] || f.weather[0].description)
      .find(desc => cloudTypes.includes(desc));

    // Tr·∫°ng th√°i kh√°c
    const otherDescriptions = morningForecasts
      .map(f => weatherDescriptions[f.weather[0].description] || f.weather[0].description)
      .filter(desc => !cloudTypes.includes(desc));

    // Ch·ªçn 1 tr·∫°ng th√°i kh√¥ng ph·∫£i m√¢y
    const nonCloudDescription = otherDescriptions[0];

    // T·ªïng h·ª£p tr·∫°ng th√°i bu·ªïi s√°ng
    const morningDescriptions = [uniqueCloudDescription, nonCloudDescription].filter(Boolean).join(", ");

    // L·∫•y m√¥ t·∫£ duy nh·∫•t bu·ªïi chi·ªÅu t·ªëi ƒë·∫øn ƒë√™m
    const eveningForecasts = forecasts.slice(4, 8);
    const eveningDescriptions = eveningForecasts.map(
      f => weatherDescriptions[f.weather[0].description] || f.weather[0].description
    );

    let mostCommonEveningDescription = getMostCommonWeatherDescription(eveningDescriptions);

    // N·∫øu tr·∫°ng th√°i bu·ªïi chi·ªÅu t·ªëi ƒë·∫øn ƒë√™m tr√πng v·ªõi bu·ªïi s√°ng, thay ƒë·ªïi n·ªôi dung
    if (morningDescriptions.includes(mostCommonEveningDescription)) {
      mostCommonEveningDescription = stateMapping[mostCommonEveningDescription] || mostCommonEveningDescription;
    }
    // Ki·ªÉm tra c√≥ m∆∞a r√†o, m∆∞a gi√¥ng, m∆∞a l·ªõn kh√¥ng
    const hasRainyWeather = [...morningForecasts, ...eveningForecasts].some(f =>
      ['ng√†y c√≥ l√∫c c√≥ m∆∞a r√†o v√† r·∫£i r√°c c√≥ gi√¥ng üå´Ô∏è', 'ng√†y c√≥ m∆∞a r√†o v√† c√≥ gi√¥ng v√†i n∆°i üå´Ô∏è', 'c√≥ m∆∞a r√†o v√† gi√¥ng r·∫£i r√°c üå´Ô∏è'].includes(weatherDescriptions[f.weather[0].description] || f.weather[0].description)
    );

    // T√¨m t·ªëc ƒë·ªô gi√≥ cao nh·∫•t v√† th·∫•p nh·∫•t trong ng√†y
    const minWindSpeed = Math.min(...forecasts.map(f => f.wind.speed));
    const maxWindSpeed = Math.max(...forecasts.map(f => f.wind.speed));

    const wind_direction = getWindDirection(forecasts[forecasts.length - 1].wind.deg);

    

    let forecastMessage = `D·ª± b√°o th·ªùi ti·∫øt ng√†y ${currentDate}, khu v·ª±c H√† N·ªôi:\n`;

    

    
    forecastMessage += `\n ${morningDescriptions},`;
    forecastMessage += ` chi·ªÅu t·ªëi v√† ƒë√™m ${mostCommonEveningDescription}.`;
    forecastMessage += ` Gi√≥ ${wind_direction} c·∫•p ${getWindSpeedLevel(minWindSpeed)}-${getWindSpeedLevel(maxWindSpeed)}.`;

    // N·∫øu c√≥ c√°c tr·∫°ng th√°i m∆∞a r√†o, gi√¥ng b√£o, m∆∞a l·ªõn, th√™m c·∫£nh b√°o
    if (hasRainyWeather) {
      forecastMessage += ` ‚õàÔ∏è Trong m∆∞a gi√¥ng c√≥ kh·∫£ nƒÉng x·∫£y ra l·ªëc, s√©t, m∆∞a ƒë√° v√† gi√≥ gi·∫≠t m·∫°nh.`;
    }
    forecastMessage += ` Nhi·ªát ƒë·ªô t·ª´ ${Math.round(minTemp)}¬∞C ƒë·∫øn ${Math.round(maxTemp)}¬∞Cüå°Ô∏è. Th·ªùi ti·∫øt nh∆∞ n√†y kh√¥ng qu·∫©y th√¨ h∆°i ph√≠!`;

    // Ch·ªçn ·∫£nh GIF ph√π h·ª£p
    const selectedGif = selectWeatherGif(morningDescriptions, mostCommonEveningDescription);

    // N·∫øu c√≥ ·∫£nh GIF, g·ª≠i ·∫£nh GIF thay v√¨ hi·ªÉn th·ªã URL
    if (selectedGif) {
      bot.sendAnimation(chatId, selectedGif, { caption: forecastMessage });
    } else {
      bot.sendMessage(chatId, forecastMessage);
    }
  });
}
// Thi·∫øt l·∫≠p cron ƒë·ªÉ g·ªçi h√†m v√†o 7 gi·ªù s√°ng theo m√∫i gi·ªù Vi·ªát Nam
cron.schedule('0 6 * * *', getDailyWeatherForecast, {
  timezone: "Asia/Ho_Chi_Minh", // ƒê·∫∑t m√∫i gi·ªù cho Vi·ªát Nam
});

// Thi·∫øt l·∫≠p c√°c cron jobs
resetDailyGiftStatus(DailyGiftStatus); // Truy·ªÅn m√¥ h√¨nh DailyGiftStatus
sendMorningMessage(bot);

// X·ª≠ l√Ω callback t·ª´ Telegram
bot.on('callback_query', async (callbackQuery) => {
  await handleGiftClaim(bot, callbackQuery, BangCong2, DailyGiftStatus); // Truy·ªÅn m√¥ h√¨nh DailyGiftStatus
});

//news.js
// ChatId c·ªßa nh√≥m
const groupChatId = -1002103270166; // Thay b·∫±ng ChatId c·ªßa nh√≥m b·∫°n

// Thi·∫øt l·∫≠p l·ªãch tr√¨nh g·ª≠i tin nh·∫Øn v√†o nh√≥m
setupNewsSchedule(bot, groupChatId);

//ban.js
// Danh s√°ch c√°c t√™n th√†nh vi√™n kh√¥ng b·ªã ban
let exemptedNames = [
    'Ngocai98',
    'Tu·∫•n T√∫',
    'Linh ƒêan',
    'GIA H√ÇN üßèüèª‚Äç‚ôÄÔ∏è',
    'So√†i L·∫Øk üéÄ',
    'Emlysa',
    'N h M i',
    'xZK006x',
    'Nguyen Linh',
    'hoahoa',
    'Hocdb Hocdv',
    'Louis_manh‚ùÑ',
    'LE TRAM üçÑ',
    'H∆∞∆°ng L√™ üçã',
    'ƒê·ªó Ho√†i Nam',
    'Nguy·ªÖn Tr·ªçng Nguy√™n',
    'Ng Chi',
    'Li√™n',
    'T√¥n Nguy·ªÖn Th·ªç C∆∞·ªùng',
    'Kien',
    'Ki·ªÅu Th∆∞',
    'B√© y·∫øn . √ù',
    'Lele1111',
    'Lan Qu·ª≥nh',
    'Minh Quang Quang',
    'Mr ` Nam (2)',
    'H·∫£i An',
    'N Th·ªç',
    'Thu H∆∞∆°ng',
    'NGUYEN TRONG PHUC PHUCNGUYEN'
];


// Li√™n k·∫øt s·ª± ki·ªán 'new_chat_members' v·ªõi h√†m t·ª´ ban.js
bot.on('new_chat_members', (msg) => {
    handleNewChatMembers(bot, msg, exemptedNames); // G·ªçi h√†m ban/unban v·ªõi danh s√°ch lo·∫°i tr·ª´
});

// X·ª≠ l√Ω l·ªánh /notban
bot.onText(/\/notban (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const nameToExempt = match[1].trim(); // L·∫•y t√™n th√†nh vi√™n t·ª´ l·ªánh

    exemptedNames.push(nameToExempt); // Th√™m t√™n v√†o danh s√°ch kh√¥ng ban
    bot.sendMessage(chatId, `Kh√¥ng ban th√†nh vi√™n c√≥ t√™n g·∫ßn ƒë√∫ng: ${nameToExempt}`);
});
